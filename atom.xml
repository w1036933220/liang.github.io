<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liang的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liang5757.github.io/"/>
  <updated>2020-07-29T07:36:01.783Z</updated>
  <id>https://liang5757.github.io/</id>
  
  <author>
    <name>Liang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>四则运算生成命令行程序 (Python)</title>
    <link href="https://liang5757.github.io/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/"/>
    <id>https://liang5757.github.io/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/</id>
    <published>2020-07-29T07:29:07.000Z</published>
    <updated>2020-07-29T07:36:01.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github项目地址：Github-Pages"><a href="#Github项目地址：Github-Pages" class="headerlink" title="Github项目地址：Github Pages"></a>Github项目地址：<a href="https://github.com/P4XL/Collaborators" target="_blank" rel="noopener">Github Pages</a></h3><p><strong>结对项目成员</strong>：张鹏 3118004985 郑靓 3118004988</p><hr><h2 id="一、项目需求分析"><a href="#一、项目需求分析" class="headerlink" title="一、项目需求分析"></a>一、项目需求分析</h2><p><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_1a34d9eb8e15a77a9e4c2d5ebc21686e.png" alt></p><h2 id="二、功能实现"><a href="#二、功能实现" class="headerlink" title="二、功能实现"></a>二、功能实现</h2><p><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_bbd168d7d9aeb25e7d9270afd96b830f.png" alt></p><hr><h2 id="三、代码实现or功能说明"><a href="#三、代码实现or功能说明" class="headerlink" title="三、代码实现or功能说明"></a>三、代码实现or功能说明</h2><h3 id="★-GUI功能扩展说明-🎈"><a href="#★-GUI功能扩展说明-🎈" class="headerlink" title="★ GUI功能扩展说明 🎈"></a>★ GUI功能扩展说明 🎈</h3><p><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_0bb403332af8e8c649391ee56389bfc4.png" alt></p><ul><li><p>采用了<strong>多线程</strong>的界面，任何操作不会阻塞其他操作，<strong>例如：可以在生成答案的同时批改作业</strong></p></li><li><p>得益于上面的设计，可以<strong>同时生成多个表达式文件</strong>，存储形式如下所示</p><p>  <img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/image-20200414233819634.png" alt="image-20200414233819634"></p></li><li><p>对于<strong>错误的输入</strong>，会有提示，如下所示</p><p>  <img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/image-20200414234132290.png" alt="image-20200414234132290"></p></li><li><p>对于文件选择后，点击批改，对于<strong>文件的格式有错误检查</strong></p><p>  <img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/image-20200414234112231.png" alt="image-20200414234112231"></p></li></ul><h3 id="通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成-详参下文-‘判断重复的思路’"><a href="#通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成-详参下文-‘判断重复的思路’" class="headerlink" title="通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成 (详参下文 ‘判断重复的思路’ )"></a>通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成 (详参下文 ‘判断重复的思路’ )</h3><h3 id="★-多线程（防止I-O阻塞）🎈"><a href="#★-多线程（防止I-O阻塞）🎈" class="headerlink" title="★ 多线程（防止I/O阻塞）🎈"></a>★ 多线程（防止I/O阻塞）🎈</h3><ul><li>创建<strong>生产者</strong>线程, 传参进队列 ‘queue’</li></ul><blockquote><p>producer = multiprocessing.Process(target=self.expression_generator, args=(queue,))</p></blockquote><ul><li>创建<strong>消费者</strong>进程, 传参进队列 ‘queue’</li></ul><blockquote><p>consumer = multiprocessing.Process(target=self.io_operation, args=(queue,))</p></blockquote><ul><li><p><strong>生产者</strong>——循环生成表达式 及其答案</p><ol><li><strong>构建</strong>随机表达式 以及生成其答案 ‘ Arithmetic(self.domain).create_arithmetic() ‘</li><li><strong>生成</strong>其表达式对应答案 ‘ Calculate(expression).cal_expression() ‘</li><li>将生成后缀表达式过程中每次的结果 以及操作符集合 保存到 字典 (‘ self.no_repeat_dict ‘ ) 中, 从而确保生成等式不相同 (即 3+2+1 与 1+2+3 不相等, ６×8  与 8×6 相等)</li><li>生成完成后, 把表达式 以及 答案添加到队列 <strong>queue</strong> 中</li></ol></li><li><p><strong>消费者</strong>——循环生成表达式 及其答案</p><ol><li>通过死循环不断获取队列内容, 若队列传出 ‘None’ 信号, 消费者进程停止</li><li>解析从队列获取的内容, 并将多次获取的表达式以及答案保存到 <strong>缓冲区(Buffer)</strong> 中, 有限次数后开始写入文件 并 销毁缓冲区内容</li></ol></li></ul><h3 id="★-判断重复的思路-🎈"><a href="#★-判断重复的思路-🎈" class="headerlink" title="★ 判断重复的思路 🎈"></a>★ 判断重复的思路 🎈</h3><ol><li>由于考虑到题目说<strong>1+2+3</strong>，<strong>2+1+3</strong>相等，<strong>1+2+3</strong>和<strong>3+2+1</strong>是不相等的，我一开始是从<strong>字符串的处理</strong>考虑，但是复杂度有点高。</li><li>所以换了一个角度考虑，从<strong>运算顺序</strong>入手，就想到用<strong>后缀表达式</strong>进行去重，并且这样也<strong>不用考虑括号</strong>，符合题目所说的<strong>（1+2)+3</strong>和<strong>1+2+3</strong>相等</li><li>具体就是<strong>存储每一次运算出来的结果</strong>，然后进行<strong>一一比较</strong><br> <strong>例如</strong>（这里举的是比较简单的例子）： 1+2+3，压入的数字：[3, 6]; 3+2+1，压入的数字：[5，6]，所有两个判断为不相等</li><li>但是这样会出现<strong>1+3</strong>和<strong>2+2</strong>判断为<strong>重复</strong>的情况，所以<strong>添加</strong>两个数组——<strong>[操作数]，[运算符]</strong>，作为比较的依据</li><li>再来考虑效率，用<strong>字典</strong>的数据结构，以答案为键，其他三个比较标志作为值，只在<strong>答案相等的情况下判重</strong><br> 附：最终选定了添加后缀计算的去重模式，就是为了避免 <strong>(1÷1)+3</strong> 和 <strong>1+(3÷1)</strong> 这种不为重复表达式的情况，但是效率确实比只判断（操作数、运算符）的模式低了</li></ol><h4 id="——创建数据结构"><a href="#——创建数据结构" class="headerlink" title="——创建数据结构"></a>——创建数据结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用答案作为索引构建的字典，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"1'2/2"</span>: [</span><br><span class="line">        [[压入的数字], [操作数], [运算符]],</span><br><span class="line">        [[压入的数字], [操作数], [运算符]],</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过比较上述字典, 确认新表达式是否已经在上述字典中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_repeat</span><span class="params">(self, answer, test_sign)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> expression_sign <span class="keyword">in</span> self.no_repeat_dict[answer]:</span><br><span class="line">        <span class="comment"># 记录相同的个数</span></span><br><span class="line">        same_num = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> collections.Counter(expression_sign[i]) == collections.Counter(test_sign[i]):</span><br><span class="line">                same_num += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 如果中间结果、操作数、运算符均相等，则为重复</span></span><br><span class="line">        <span class="keyword">if</span> same_num == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="★-生成表达式思路-🎈"><a href="#★-生成表达式思路-🎈" class="headerlink" title="★ 生成表达式思路 🎈"></a>★ 生成表达式思路 🎈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式列表形式</span></span><br><span class="line">[<span class="string">'10'</span>, <span class="string">'÷'</span>, <span class="string">'('</span>, <span class="string">'8/9'</span>, <span class="string">'÷'</span>, <span class="string">'51'</span>, <span class="string">')'</span>]</span><br></pre></td></tr></table></figure><ol><li>随机生成<strong>操作数</strong>列表，<strong>运算符</strong>列表</li><li>根据以上两个列表构建<strong>无括号表达式</strong></li><li>根据运算符个数，随机生成括号个数，<strong>最大</strong>个数为（ 1-&gt;0, 2-&gt;1, 3-&gt;2 ）</li><li>再随机括号位置，维护<strong>操作数位置列表</strong>，插入括号</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成表达式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_arithmetic</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 生成随机操作数、运算符列表</span></span><br><span class="line">    self.create_operand_list()</span><br><span class="line">    self.create_operator_list()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建表达式列表</span></span><br><span class="line">    self.expression_split.append(self.operand_list[i])</span><br><span class="line">    self.expression_split.append(self.operator_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(self.operator_list):</span><br><span class="line">        self.expression_split.append(self.operand_list[i])</span><br><span class="line">        self.expression_split.append(self.operator_list[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        self.expression_split.append(self.operand_list[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入括号</span></span><br><span class="line">        <span class="keyword">if</span> self.operator_num != <span class="number">1</span>:</span><br><span class="line">            bracket_num = random.randint(<span class="number">1</span>, self.operator_num - <span class="number">1</span>)</span><br><span class="line">            self.insert_bracket(bracket_num)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除无用括号</span></span><br><span class="line">            self.del_useless_bracket()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [self.expression_split, self.operand_list, self.operator_list]</span><br></pre></td></tr></table></figure><h3 id="★-计算思路（后缀表达式）-🎈"><a href="#★-计算思路（后缀表达式）-🎈" class="headerlink" title="★ 计算思路（后缀表达式） 🎈"></a>★ 计算思路（后缀表达式） 🎈</h3><h4 id="生成后缀表达式"><a href="#生成后缀表达式" class="headerlink" title="生成后缀表达式"></a>生成后缀表达式</h4><ol><li>设置两个栈，一个用以存储运算符，一个用以存储后缀表达式</li><li>循环遍历表达式列表，如果是<strong>操作数</strong>，则加入<strong>后缀栈</strong></li><li>否则如果是运算符则进入以下判断<ul><li>如果运算符栈为<strong>空</strong>，或者栈顶为 <strong>(</strong> ，则压入<strong>运算符栈</strong></li><li>否则如果当前运算符<strong>大于</strong>栈顶运算符的优先级，则压入<strong>运算符栈</strong></li><li>否则<strong>弹栈并压入后缀栈</strong>直到优先级<strong>大于</strong>栈顶<strong>或空栈</strong></li></ul></li><li>否则如果遇到括号则进入以下判断<ul><li>若为 <strong>(</strong> 直接压入<strong>运算符栈</strong></li><li>否则<strong>弹栈并压入后缀栈</strong>直到遇到 <strong>(</strong></li></ul></li><li>将运算符栈<strong>剩余的元素</strong>压入<strong>后缀栈</strong></li></ol><h4 id="计算后缀表达式"><a href="#计算后缀表达式" class="headerlink" title="计算后缀表达式"></a>计算后缀表达式</h4><ol><li>用一个栈（calculate_stack）作为计算中介</li><li>循环遍历后缀表达式，若为<strong>数字</strong>压入 <strong>calculate_stack</strong></li><li>否则从 <strong>calculate_stack</strong> 弹出两个数字，分别化为分数类，进行计算，结果压入 <strong>calculate_stack</strong></li><li>重复 <strong>2-3</strong>，若<strong>期间</strong>运算结果<strong>出现负数</strong>，或<strong>除数为0</strong>，则返回false</li><li>直至后缀表达式遍历完成，返回 <strong>calculate_stack</strong> 的栈顶</li></ol><h3 id="代码-🎈"><a href="#代码-🎈" class="headerlink" title="代码 🎈"></a>代码 🎈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculate</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数加法 a1/b1 + a2/b2 = (a1b2 + a2b1)/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_add</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator + fra2.molecular * fra1.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数减法 a1/b1 - a2/b2 = (a1b2 - a2b1)/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_minus</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator - fra2.molecular * fra1.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数乘法 a1/b1 * a2/b2 = a1a2/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_multiply</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.molecular</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数除法 a1/b1 ÷ a2/b2 = a1b2/a2b1</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_divide</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.molecular</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基本运算选择器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operate</span><span class="params">(self, num1, num2, operater)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num1, Fraction):</span><br><span class="line">            num1 = Fraction(num1)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num2, Fraction):</span><br><span class="line">            num2 = Fraction(num2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算结果</span></span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_add(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_minus(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'×'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_multiply(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'÷'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_divide(num1, num2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转成逆波兰</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_postfix_expression</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 运算符栈</span></span><br><span class="line">        operator_stack = []</span><br><span class="line">        <span class="comment"># 后缀栈</span></span><br><span class="line">        postfix_stack = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self.expression:</span><br><span class="line">            <span class="comment"># 如果是操作数则添加</span></span><br><span class="line">            <span class="keyword">if</span> element <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">                postfix_stack.append(element)</span><br><span class="line">            <span class="comment"># 如果是运算符则按优先级</span></span><br><span class="line">            <span class="keyword">elif</span> element <span class="keyword">in</span> operator.values():</span><br><span class="line">                <span class="comment"># 运算符栈为空，或者栈顶为(，则压栈</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> operator_stack <span class="keyword">or</span> operator_stack[<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 若当前运算符优先级大于运算符栈顶，则压栈</span></span><br><span class="line">                <span class="keyword">elif</span> priority[element] &gt;= priority[operator_stack[<span class="number">-1</span>]]:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 否则弹栈并压入后缀队列直到优先级大于栈顶或空栈</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">while</span> operator_stack <span class="keyword">and</span> priority[element] &lt; priority[operator_stack[<span class="number">-1</span>]]:</span><br><span class="line">                        postfix_stack.append(operator_stack.pop())</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果遇到括号</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 若为左括号直接压入运算符栈</span></span><br><span class="line">                <span class="keyword">if</span> element == <span class="string">'('</span>:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 否则弹栈并压入后缀队列直到遇到左括号</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">while</span> operator_stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                        postfix_stack.append(operator_stack.pop())</span><br><span class="line">                    operator_stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> operator_stack:</span><br><span class="line">            postfix_stack.append(operator_stack.pop())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> postfix_stack</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算表达式(运算过程出现负数，或者除数为0，返回False，否则返回Fraction类)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_expression</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 生成后缀表达式</span></span><br><span class="line">        expressions_result = self.generate_postfix_expression()</span><br><span class="line">        <span class="comment"># 存储阶段性结果</span></span><br><span class="line">        stage_results = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用list作为栈来计算</span></span><br><span class="line">        calculate_stack = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 后缀遍历</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> expressions_result:</span><br><span class="line">            <span class="comment"># 若是数字则入栈, 操作符则将栈顶两个元素出栈</span></span><br><span class="line">            <span class="keyword">if</span> element <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">                calculate_stack.append(element)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 操作数</span></span><br><span class="line">                num1 = calculate_stack.pop()</span><br><span class="line">                <span class="comment"># 操作数</span></span><br><span class="line">                num2 = calculate_stack.pop()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 除数不能为0</span></span><br><span class="line">                <span class="keyword">if</span> num1 == <span class="string">"0"</span> <span class="keyword">and</span> element == <span class="string">'÷'</span>:</span><br><span class="line">                    <span class="keyword">return</span> [<span class="literal">False</span>, []]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 结果</span></span><br><span class="line">                result = self.operate(num2, num1, element)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> result.denominator == <span class="number">0</span> <span class="keyword">or</span> <span class="string">'-'</span> <span class="keyword">in</span> result.to_string():</span><br><span class="line">                    <span class="keyword">return</span> [<span class="literal">False</span>, []]</span><br><span class="line"></span><br><span class="line">                stage_results.append(result.to_string())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 结果入栈</span></span><br><span class="line">                calculate_stack.append(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> [calculate_stack[<span class="number">0</span>], stage_results]</span><br></pre></td></tr></table></figure><h2 id="四、实际测试"><a href="#四、实际测试" class="headerlink" title="四、实际测试"></a>四、实际测试</h2><blockquote><h3 id="通过命令行控制"><a href="#通过命令行控制" class="headerlink" title="通过命令行控制"></a>通过命令行控制</h3><p>python ArithmeticCLMode.py [args|args]<br>[args]<br>├─ -h –help # 输出帮助信息<br>├─ -n # 指定生成表达式数量，默认100<br>├─ -r # 指定生成表达式各个数字的取值范围，默认100<br>├─ -a # 需和-e参数共同使用进行批改，指定答案文件<br>├─ -e # 需和-a参数共同使用进行批改，指定练习文件<br>└─ -g # 开启GUI</p></blockquote><blockquote><h3 id="通过gui控制"><a href="#通过gui控制" class="headerlink" title="通过gui控制"></a>通过gui控制</h3></blockquote><blockquote><p>python ArithmeticGMode.py</p></blockquote><p><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/image-20200414233202708.png" alt="image-20200414233202708"></p><h4 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ArithmeticCLMode.py -n <span class="number">100</span> -r <span class="number">100</span></span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_60c4aa60be8f2619d5715fc68bfa762d.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将上述执行生成的 Exercise.txt 中的1~10题的答案改为错误 执行</span></span><br><span class="line">python ArithmeticCLMode.py -e ./docs/Exercise.txt -a ./docs/Answer.txt</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_993b6c9a87996b978128c0eacd68a660.png" alt></p><hr><h2 id="五、效能分析"><a href="#五、效能分析" class="headerlink" title="五、效能分析"></a>五、效能分析</h2><blockquote><p>由Pycharm测试输出性能测试</p></blockquote><p><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_cc740cca241023e3a9f800dca4c03b00.png" alt></p><blockquote><p>程序耗时在多线程中的 生成表达式及计算, 以及I/O操作</p></blockquote><blockquote><p>在值域1000的情况下各生成不同数量级四则运算的耗时测试<br><img src= "/img/loading.gif" data-src="/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/upload_97d3624288947d04deacbe79ec23f00d.png" alt></p></blockquote><hr><h2 id="六、PSP表格-🚩"><a href="#六、PSP表格-🚩" class="headerlink" title="六、PSP表格 🚩"></a>六、PSP表格 🚩</h2><table><thead><tr><th>PSP2.1</th><th>Personal Software Process Stages</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>Planning</td><td>计划</td><td>30</td><td>10</td></tr><tr><td>· Estimate</td><td>· 估计这个任务需要多少时间</td><td>30</td><td>10</td></tr><tr><td>Development</td><td>开发</td><td>1055</td><td>1480</td></tr><tr><td>· Analysis</td><td>· 需求分析 (包括学习新技术)</td><td>120</td><td>335</td></tr><tr><td>· Design Spec</td><td>· 生成设计文档</td><td>60</td><td>35</td></tr><tr><td>· Design Review</td><td>· 设计复审 (和同事审核设计文档)</td><td>5</td><td>5</td></tr><tr><td>· Coding Standard</td><td>· 代码规范 (为目前的开发制定合适的规范)</td><td>10</td><td>5</td></tr><tr><td>· Design</td><td>· 具体设计</td><td>200</td><td>120</td></tr><tr><td>· Coding</td><td>· 具体编码</td><td>600</td><td>580</td></tr><tr><td>· Code Review</td><td>· 代码复审</td><td>30</td><td>120</td></tr><tr><td>· Test</td><td>· 测试（自我测试，修改代码，提交修改）</td><td>30</td><td>150</td></tr><tr><td>Reporting</td><td>报告</td><td>85</td><td>130</td></tr><tr><td>· Test Report</td><td>· 测试报告</td><td>60</td><td>30</td></tr><tr><td>· Size Measurement</td><td>· 计算工作量</td><td>10</td><td>10</td></tr><tr><td>· Postmortem &amp; Process Improvement Plan</td><td>· 事后总结, 并提出过程改进计划</td><td>15</td><td>90</td></tr><tr><td>合计</td><td></td><td>1170</td><td>1620</td></tr></tbody></table><hr><h2 id="七、总结-🚀"><a href="#七、总结-🚀" class="headerlink" title="七、总结 🚀"></a>七、总结 🚀</h2><blockquote><p>优点：</p></blockquote><ol><li>在此次项目合作中，我们通过 “Notion” 这一个软件完成设计我们的 开发流程、工作分配以及我们的代码规范的设计。我们将需求列出，根据难度不同从而安排开发流程，每个人根据自己能力特出点不同而去做不同的需求，再通过交流约定我们每个人的接口。简化开发流程。</li><li>交流和配合都挺顺畅的</li></ol><blockquote><p>不足：</p></blockquote><ol><li>开发中各个模块的依赖关系在开发任务中没有处理清楚，导致双方都有空窗期</li></ol><h3 id="互评-❤💛💙"><a href="#互评-❤💛💙" class="headerlink" title="互评 ❤💛💙"></a>互评 ❤💛💙</h3><blockquote><p>To 郑靓<br>能力强，效率高，非常积极主动。能根据自己日常使用的工具提高效率，在实际开发中有明确的开发流程思路，开发过程中有部分函数代码注释思路不清。</p></blockquote><blockquote><p>To 张鹏<br>配合和交流能力强，效率高，能主动揽接任务，思维挺好的，但比较被动</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Github项目地址：Github-Pages&quot;&gt;&lt;a href=&quot;#Github项目地址：Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github项目地址：Github Pages&quot;&gt;&lt;/a&gt;Github项目地址：&lt;a hre
      
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liang5757.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="项目" scheme="https://liang5757.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>WordCount (Python)</title>
    <link href="https://liang5757.github.io/2020/07/28/WordCount-Python/"/>
    <id>https://liang5757.github.io/2020/07/28/WordCount-Python/</id>
    <published>2020-07-28T13:44:44.000Z</published>
    <updated>2020-07-29T07:24:43.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordCount-Python"><a href="#WordCount-Python" class="headerlink" title="WordCount (Python)"></a>WordCount (Python)</h1><h3 id="Github项目地址：https-github-com-w1036933220-WordCount"><a href="#Github项目地址：https-github-com-w1036933220-WordCount" class="headerlink" title="Github项目地址：https://github.com/w1036933220/WordCount"></a>Github项目地址：<a href="https://github.com/w1036933220/WordCount" target="_blank" rel="noopener">https://github.com/w1036933220/WordCount</a></h3><h2 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h2><ol><li>把项目需求理清楚，画一个思维导图</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200318234358738.png" alt="image-20200318234358738"></p><ol start="2"><li>考虑各部分功能所需要的大概实现思路</li></ol><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200318234452134.png" alt="image-20200318234452134"></p><ol start="3"><li>然后完成了计算文件属性的算法部分</li><li>再回头想对指令的解析问题，顺带添加了递归处理多个文件的功能</li><li>查python的os库文档，最后决定用os.walk读取当前文件夹内的所有文件夹和文件，替换掉输入的*和?通配符，再进行匹配</li></ol><h2 id="三、设计实现过程及代码说明"><a href="#三、设计实现过程及代码说明" class="headerlink" title="三、设计实现过程及代码说明"></a>三、设计实现过程及代码说明</h2><ol><li>main.py（入口文件）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    command = input(<span class="string">"请输入命令(wc.exe [parameter] &#123;file_name&#125;):\n"</span>)</span><br><span class="line"></span><br><span class="line">parse_command(command)</span><br></pre></td></tr></table></figure><ol start="2"><li>orders.py<br> 存放指令集，和输出各类数据的函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.count <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> views.main_view <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出字符数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_char_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"字符数："</span> + str(FileProperties(text).count_char_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出单词数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_word_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"词数："</span> + str(FileProperties(text).count_word_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出行数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"行数："</span> + str(FileProperties(text).count_line_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出代码行/空行/注释行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_code_property</span><span class="params">(text)</span>:</span></span><br><span class="line">    file_properties = FileProperties(text)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"空行："</span> + str(file_properties.count_null_line_num()))</span><br><span class="line">    print(<span class="string">"注释行："</span> + str(file_properties.count_annotation_line_num()))</span><br><span class="line">    print(<span class="string">"代码行："</span> + str(file_properties.count_code_line_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调出图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_view</span><span class="params">()</span>:</span></span><br><span class="line">root = MainView(tk.Tk())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单指令命令集</span></span><br><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: print_char_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">'-w'</span>: print_word_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-l"</span>: print_line_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-a"</span>: print_code_property,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-s"</span>: print_error,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-x"</span>: draw_view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>utils.py<br> 放置解析指令、读取文件、模糊搜素的函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> utils.orders <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># description：parse command</span></span><br><span class="line"><span class="comment"># param：order input</span></span><br><span class="line"><span class="comment"># return：[order, [file_list]] / FALSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_command</span><span class="params">(command)</span>:</span></span><br><span class="line">    command = command.strip().split(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指令若为空或者起始不为wc.exe则报错</span></span><br><span class="line">    <span class="keyword">if</span> command == [] <span class="keyword">or</span> command[<span class="number">0</span>] != <span class="string">"wc.exe"</span>:</span><br><span class="line">        print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开图形界面的指令(一级指令)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"-x"</span> <span class="keyword">in</span> command:</span><br><span class="line">        orders.get(<span class="string">"-x"</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(command) &gt; <span class="number">2</span>:</span><br><span class="line">        order = command[<span class="number">-2</span>]</span><br><span class="line">        file_name = command[<span class="number">-1</span>]</span><br><span class="line">        file_list = get_file_list(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归调用的指令</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"-s"</span> <span class="keyword">in</span> command:</span><br><span class="line">            <span class="keyword">if</span> file_list:</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">                    print(file + <span class="string">":"</span>)</span><br><span class="line">                    text = read_file(file)</span><br><span class="line">                    orders.get(order)(text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(file_list[<span class="number">0</span>] + <span class="string">":"</span>)</span><br><span class="line">            text = read_file(file_name)</span><br><span class="line">            orders.get(order)(text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取目录下符合条件的文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_list</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 最终构建的文件列表</span></span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="comment"># 匹配到的文件夹列表、需二次处理</span></span><br><span class="line">    dir_list = []</span><br><span class="line"></span><br><span class="line">    file_name = file_name.replace(<span class="string">"?"</span>, <span class="string">"\\S"</span>).replace(<span class="string">"*"</span>, <span class="string">"\\S+"</span>)</span><br><span class="line">    file_name += <span class="string">"$"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> re.match(file_name, name):</span><br><span class="line">                file_list.append(os.path.join(root, name))</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">            <span class="keyword">if</span> re.match(file_name, name):</span><br><span class="line">                dir_list.append(os.path.join(os.getcwd() + os.sep, name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果文件夹非空，则继续收集</span></span><br><span class="line">    <span class="keyword">if</span> dir_list:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> dir_list:</span><br><span class="line">            all_file = os.listdir(item)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> all_file:</span><br><span class="line">                <span class="comment"># 文件的完整路径</span></span><br><span class="line">                file_path = item + os.sep + file</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                    file_list.append(file_path)</span><br><span class="line"></span><br><span class="line">    print(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># description：read files</span></span><br><span class="line"><span class="comment"># param：file_list</span></span><br><span class="line"><span class="comment"># return：file content</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.readlines()</span><br></pre></td></tr></table></figure><ol start="4"><li>count.py<br> 存放计算文件属性的类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileProperties</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_text)</span>:</span></span><br><span class="line">        self.file_text = file_text</span><br><span class="line">        <span class="comment"># 字符数</span></span><br><span class="line">        self.char_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 单词数</span></span><br><span class="line">        self.word_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 行数</span></span><br><span class="line">        self.line_num = len(file_text)</span><br><span class="line">        <span class="comment"># 空行</span></span><br><span class="line">        self.null_line_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 代码行</span></span><br><span class="line">        self.code_line_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 注释行数</span></span><br><span class="line">        self.annotation_line_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算字符数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_char_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            self.char_num += len(line.strip())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.char_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算单词数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_word_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            <span class="comment"># 正则匹配一行中的所有单词，并计算单词数</span></span><br><span class="line">            self.word_num += len(re.findall(<span class="string">r'[a-zA-Z0-9]+[\-\']?[a-zA-Z]*'</span>, line))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.word_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算行数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算空行数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_null_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            <span class="comment"># 只有不超过一个可显示的字符</span></span><br><span class="line">            <span class="keyword">if</span> len(re.findall(<span class="string">r'\S'</span>, line)) &lt;= <span class="number">1</span>:</span><br><span class="line">                self.null_line_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.null_line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算代码行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_code_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.line_num - self.null_line_num - self.annotation_line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算注释行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_annotation_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="comment"># 匹配不是代码行且有//</span></span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r'^\S?\s*?\/\/'</span>, line):</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 匹配不是代码行且有/*</span></span><br><span class="line">            <span class="keyword">elif</span> re.match(<span class="string">r'^\S?\s*?\/\*'</span>, line):</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> line.endswith(<span class="string">'*/'</span>):</span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"*/"</span> <span class="keyword">in</span> line:</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.annotation_line_num</span><br></pre></td></tr></table></figure><p>5.main_view.py(新增)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.count <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainView</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, window)</span>:</span></span><br><span class="line">        self.window = window</span><br><span class="line">        self.window.title(<span class="string">"这是船新的版本！"</span>)</span><br><span class="line">        self.window.geometry(<span class="string">"540x290"</span>)</span><br><span class="line">        self.data_tree = ttk.Treeview(self.window, show=<span class="string">"headings"</span>)</span><br><span class="line">        self.creat_view()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creat_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 选择文件按钮</span></span><br><span class="line">        btn = tk.Button(self.window, text=<span class="string">"选择文件"</span>, command=self.file_choose).place(x=<span class="number">240</span>, y=<span class="number">247</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件数据显示表格</span></span><br><span class="line">        self.data_tree.place(x=<span class="number">8</span>, y=<span class="number">8</span>)</span><br><span class="line">        <span class="comment"># 定义列</span></span><br><span class="line">        self.data_tree[<span class="string">"columns"</span>] = (<span class="string">"文件名"</span>, <span class="string">"字符数"</span>, <span class="string">"单词数"</span>, <span class="string">"行数"</span>, <span class="string">"空行数"</span>, <span class="string">"代码行数"</span>, <span class="string">"注释行数"</span>)</span><br><span class="line">        <span class="comment"># 设置列属性，列不显示</span></span><br><span class="line">        self.data_tree.column(<span class="string">"文件名"</span>, width=<span class="number">100</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"字符数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"单词数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"空行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"代码行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"注释行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        <span class="comment"># 设置表头</span></span><br><span class="line">        self.data_tree.heading(<span class="string">"文件名"</span>, text=<span class="string">"文件名"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"字符数"</span>, text=<span class="string">"字符数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"单词数"</span>, text=<span class="string">"单词数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"行数"</span>, text=<span class="string">"行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"空行数"</span>, text=<span class="string">"空行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"代码行数"</span>, text=<span class="string">"代码行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"注释行数"</span>, text=<span class="string">"注释行数"</span>)</span><br><span class="line"></span><br><span class="line">        self.window.mainloop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_choose</span><span class="params">(self)</span>:</span></span><br><span class="line">        file_list = tk.filedialog.askopenfilenames()</span><br><span class="line">        <span class="keyword">for</span> index, file <span class="keyword">in</span> enumerate(file_list):</span><br><span class="line">            text = read_file(file)</span><br><span class="line">            [char_num, word_num, line_num, null_line_num, code_line_num,</span><br><span class="line">             annotation_line_num] = FileProperties(text).all_count()</span><br><span class="line">            file = file.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">            self.data_tree.insert(<span class="string">''</span>, index, values=(file, char_num, word_num, line_num,</span><br><span class="line">                                                 null_line_num, code_line_num, annotation_line_num))</span><br></pre></td></tr></table></figure><h2 id="五、PSP表格"><a href="#五、PSP表格" class="headerlink" title="五、PSP表格"></a>五、PSP表格</h2><table><thead><tr><th>PSP2.1</th><th>Personal Software Process Stages</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>Planning</td><td>计划</td><td>10</td><td>8</td></tr><tr><td>· Estimate</td><td>· 估计这个任务需要多少时间</td><td>10</td><td>8</td></tr><tr><td>Development</td><td>开发</td><td>460</td><td>610</td></tr><tr><td>· Analysis</td><td>· 需求分析 (包括学习新技术)</td><td>120</td><td>200</td></tr><tr><td>· Design Spec</td><td>· 生成设计文档</td><td>90</td><td>60</td></tr><tr><td>· Design Review</td><td>· 设计复审 (和同事审核设计文档)</td><td>5</td><td>5</td></tr><tr><td>· Coding Standard</td><td>· 代码规范 (为目前的开发制定合适的规范)</td><td>5</td><td>0</td></tr><tr><td>· Design</td><td>· 具体设计</td><td>120</td><td>100</td></tr><tr><td>· Coding</td><td>· 具体编码</td><td>90</td><td>200</td></tr><tr><td>· Code Review</td><td>· 代码复审</td><td>10</td><td>30</td></tr><tr><td>· Test</td><td>· 测试（自我测试，修改代码，提交修改）</td><td>20</td><td>15</td></tr><tr><td>Reporting</td><td>报告</td><td>30</td><td>32</td></tr><tr><td>· Test Report</td><td>· 测试报告</td><td>10</td><td>12</td></tr><tr><td>· Size Measurement</td><td>· 计算工作量</td><td>10</td><td>5</td></tr><tr><td>· Postmortem &amp; Process Improvement Plan</td><td>· 事后总结, 并提出过程改进计划</td><td>10</td><td>8</td></tr><tr><td>合计</td><td></td><td>355</td><td>630</td></tr></tbody></table><h2 id="六、测试运行"><a href="#六、测试运行" class="headerlink" title="六、测试运行"></a>六、测试运行</h2><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200324233229734.png" alt="image-20200324233229734"></p><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200324233138984.png" alt="image-20200324233138984"></p><p>图形界面测试（新增）</p><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200325013347708.png" alt="image-20200325013347708"></p><p><img src= "/img/loading.gif" data-src="/2020/07/28/WordCount-Python/image-20200325020159689.png" alt="image-20200325020159689"></p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ol><li>太久没写python了，发现居然没有switch这个语句，百度查到了表驱动这个东西</li><li>用时与预计的出入有点大</li><li>输入验证处理没有做完全，图形界面没时间做了（过了大半年遗忘率确实高）</li><li>写的时候发现python有些问题不知道是bug还是什么</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: print_char_num,</span><br><span class="line">    <span class="string">'-w'</span>: print_word_num,</span><br><span class="line">    <span class="string">"-l"</span>: print_line_num,</span><br><span class="line">    <span class="string">"-a"</span>: print_code_property,</span><br><span class="line">    <span class="string">"-s"</span>: print_error,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我的指令集，如果把他写成像js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 某些操作</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python不管会不会用到这个指令集，都会把字典中的值执行一遍，所以只能放函数名，js就不会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WordCount-Python&quot;&gt;&lt;a href=&quot;#WordCount-Python&quot; class=&quot;headerlink&quot; title=&quot;WordCount (Python)&quot;&gt;&lt;/a&gt;WordCount (Python)&lt;/h1&gt;&lt;h3 id=&quot;Githu
      
    
    </summary>
    
    
      <category term="软件工程" scheme="https://liang5757.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="项目" scheme="https://liang5757.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>仿网易云音乐的对话气泡框</title>
    <link href="https://liang5757.github.io/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%B0%94%E6%B3%A1%E6%A1%86/"/>
    <id>https://liang5757.github.io/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%B0%94%E6%B3%A1%E6%A1%86/</id>
    <published>2020-07-16T17:16:34.000Z</published>
    <updated>2020-07-29T07:13:54.623Z</updated>
    
    <content type="html"><![CDATA[<p>主要就是对话框小三角的实现，效果如下</p><p><img src= "/img/loading.gif" data-src="/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%B0%94%E6%B3%A1%E6%A1%86/1.png" alt="1"></p><p>主要难点就是三角形的实现，有两种思路，一种是利用<strong>border</strong>，网易云音乐是用<strong>两个 ◆ 层叠显示边框</strong>的，下面是核心代码</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"darr"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span>◆<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span>◆<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>liang<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    ：<span class="tag">&lt;<span class="name">span</span>&gt;</span>嘤嘤嘤呀呀呀呀呀呀晕晕晕晕<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.darr</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 边框</span><br><span class="line"><span class="selector-class">.bd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要就是对话框小三角的实现，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
