<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liang的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liang5757.github.io/"/>
  <updated>2020-10-30T12:49:44.893Z</updated>
  <id>https://liang5757.github.io/</id>
  
  <author>
    <name>Liang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>圣杯布局、双飞翼布局</title>
    <link href="https://liang5757.github.io/2020/10/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <id>https://liang5757.github.io/2020/10/30/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E3%80%81%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-10-30T12:33:32.000Z</published>
    <updated>2020-10-30T12:49:44.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-问题场景"><a href="#1-问题场景" class="headerlink" title="1. 问题场景"></a>1. 问题场景</h2><p>三列布局中，如果想要将主要内容main优先加载优化，则DOM如下所示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-container"</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-main"</span>&gt;</span>我是主列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-left"</span>&gt;</span>我是左列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-right"</span>&gt;</span>我是右列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但又想将主要内容在中间位置显示，便有如下css</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-container</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-container</span> <span class="selector-class">.g-main</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc6630</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面逐行分析一下：<br>第1行：grid-s5m0e5 是一个布局框的名称，我们为其定义了宽度100%（在IE6一不定义100%时，有点小问题，亲们自己可以一试）</p><p>第2行：col-main 【主列】：浮动左侧，宽度100%（宽度全让它给占了，左右两侧的层该怎么办？）</p><p>第3行：col-sub 【子列】：浮动左侧，宽度190，左边界为-100%（此处是关键：浮动情况下，负边界值会导致DIV上移，而使用-100%可以确实它移动到最左侧。）</p><p>第4行：col-extra 【附加列】：左浮动，宽度190，左边界为-190px（道理同上，注意的是，负左边界一定要大于或等于该DIV的宽度，才能靠到上一行去）</p><p>让我们看看效果</p><p><img src= "/img/loading.gif" data-src="1565423970941.png" alt="1565423970941"></p><p><strong>但这样布局后发现主列中的文字不见了</strong>，经过DOM分析发现，原来是<strong>被col-sub挡住</strong>了，那么如何给main正确的定位呢。</p><h2 id="1-圣杯布局-margin-position"><a href="#1-圣杯布局-margin-position" class="headerlink" title="1.圣杯布局(margin+position)"></a>1.圣杯布局(margin+position)</h2><blockquote><p>左右两列通过<code>margin-left</code>与<code>left和right</code>准确定位，中间列用width:100%撑开<br>圣杯布局的关键点父元素需要设置<code>padding</code><br><code>margin-left</code>取值为百分比时，是以其父元素的宽度为基准的</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">190px</span>;</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc6630</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffcc00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-圣杯布局-flex"><a href="#2-圣杯布局-flex" class="headerlink" title="2. 圣杯布局(flex)"></a>2. 圣杯布局(flex)</h2><blockquote><p>利用flex的order属性调整位置</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-main</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">flex</span>: auto <span class="number">1</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc6630</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-left</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffcc00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-right</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="image-20201030180215043.png" alt="image-20201030180215043"></p><p>这种写法更加简洁，但是兼容性不太好</p><h2 id="3-双飞翼布局-margin"><a href="#3-双飞翼布局-margin" class="headerlink" title="3.双飞翼布局(margin)"></a>3.双飞翼布局(margin)</h2><blockquote><p>利用<code>margin-left</code>属性将左右两列放置到准确的位置，通过控制 main列 的<code>margin</code>空出左右两列</p></blockquote><p>下面是淘宝的做法：</p><p>1、DOM结构的改变：在.col-main下再次添加一个 .main-wrap</p><p>2、利用CSS调整.main-wrap的位置。【这里很简单，就是把左右被挡住的部分，设置为main-wrap的左   右边界即可】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-main"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-wrap"</span>&gt;</span></span><br><span class="line">            我是主列，出来吧！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-left"</span>&gt;</span>我是左列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-right"</span>&gt;</span>我是右列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-container</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-container</span> <span class="selector-class">.g-main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cc6630</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="selector-class">.main-wrap</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">200px</span>; <span class="comment">/*与g-left产生10像素距离*/</span></span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">200px</span>; <span class="comment">/*与g-right产生10像素距离*/</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#0f0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-right</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">190px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#00f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果</p><p><img src= "/img/loading.gif" data-src="1565424018386.png" alt="1565424018386"></p><p><strong>优点</strong></p><ul><li>实现了内容与布局的分离，即Eric提到的Any-Order Columns.</li><li>main部分是自适应宽度的，很容易在定宽布局和流体布局中切换。</li><li>任何一栏都可以是最高栏，不会出问题。</li><li>需要的hack非常少（就一个针对ie6的清除浮动hack:_zoom: 1;）</li><li>在浏览器上的兼容性非常好，IE5.5以上都支持。</li></ul><p><strong>不足</strong></p><ul><li>main需要添加一个额外的包裹层。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-问题场景&quot;&gt;&lt;a href=&quot;#1-问题场景&quot; class=&quot;headerlink&quot; title=&quot;1. 问题场景&quot;&gt;&lt;/a&gt;1. 问题场景&lt;/h2&gt;&lt;p&gt;三列布局中，如果想要将主要内容main优先加载优化，则DOM如下所示&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="技巧" scheme="https://liang5757.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css预处理器：Less</title>
    <link href="https://liang5757.github.io/2020/10/30/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9ALess/"/>
    <id>https://liang5757.github.io/2020/10/30/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%9ALess/</id>
    <published>2020-10-30T12:30:48.000Z</published>
    <updated>2020-10-30T12:33:01.682Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><ul><li>以 // 开头的注释，不会被编译到css文件中</li><li>以 /**/ 包裹的注释会被编译到css文件中</li></ul><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><h4 id="2-1普通变量"><a href="#2-1普通变量" class="headerlink" title="2.1普通变量"></a>2.1普通变量</h4><p>less中使用@定义一个变量，再以@开头调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@zero:</span> <span class="number">0</span>;</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">@zero</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@zero</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2变量作为选择器、属性名或者url"><a href="#2-2变量作为选择器、属性名或者url" class="headerlink" title="2.2变量作为选择器、属性名或者url"></a>2.2变量作为选择器、属性名或者url</h4><p>使用@{selector/property/url}调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@selector:</span> wrap;</span><br><span class="line"><span class="variable">@url:</span> <span class="string">"../img/1.jpg"</span>;</span><br><span class="line"><span class="variable">@w:</span> width;</span><br><span class="line"></span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">@&#123;w&#125;</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: url(<span class="string">"@&#123;url&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3变量的延迟加载"><a href="#2-3变量的延迟加载" class="headerlink" title="2.3变量的延迟加载"></a>2.3变量的延迟加载</h4><ul><li>less中的加载是有延迟的</li><li>它会在当前作用域样式未加载之前先加载变量，而且是由内而外，先寻找作用域内的变量，如果没有再寻找作用域外的变量</li><li>less机制是先加载完声明变量再赋值到样式中去</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line"><span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">    <span class="selector-class">.brass</span> &#123;</span><br><span class="line">      <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">three</span>: <span class="variable">@var</span>;  <span class="comment">//3</span></span><br><span class="line">      <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="attribute">one</span>: <span class="variable">@var</span>;  <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-嵌套规则"><a href="#3-嵌套规则" class="headerlink" title="3.嵌套规则"></a>3.嵌套规则</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#list</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="comment">/*&amp;代表父级*/</span></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span>&#123;<span class="attribute">float</span>: right;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;的使用（&amp;代表父级）<br>如果想写串联选择器，而不是写后代选择器，就可以用到&amp;了.<br>这点对伪类尤其有用如 :hover 和 :focus</p><h3 id="4-混合"><a href="#4-混合" class="headerlink" title="4.混合"></a>4.混合</h3><p> 混合就是一种将一系列属性从一个规则集引入（“混合”）到另一个规则集的方式。 </p><h4 id="4-1普通混合"><a href="#4-1普通混合" class="headerlink" title="4.1普通混合"></a>4.1普通混合</h4><p><strong>会将混合内容输出到css文件中</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font_hn</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-family</span>: microsoft yahei, <span class="string">"黑体"</span>, Arial, Simsun, <span class="string">"Arial Unicode MS"</span>, Mingliu, Helvetica;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="selector-class">.font_hn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2不带输出的混合"><a href="#4-2不带输出的混合" class="headerlink" title="4.2不带输出的混合"></a>4.2不带输出的混合</h4><p> <strong>加()后就不会在css中输出混合内容了</strong> ，即输出的css文件中无font_hn</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font_hn</span>()&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-family</span>: microsoft yahei, <span class="string">"黑体"</span>, Arial, Simsun, <span class="string">"Arial Unicode MS"</span>, Mingliu, Helvetica;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="selector-class">.font_hn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3带参数的混合"><a href="#4-3带参数的混合" class="headerlink" title="4.3带参数的混合"></a>4.3带参数的混合</h4><p>类似函数的调用方式，参数名开头为@ </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@color</span>)&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(green);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">#000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其<span class="selector-tag">css</span>文件为：</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> <span class="number">#008000</span> <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">h2</span>:hover &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> <span class="number">#000000</span> <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4带参数且有默认值的混合"><a href="#4-4带参数且有默认值的混合" class="headerlink" title="4.4带参数且有默认值的混合"></a>4.4带参数且有默认值的混合</h4><p>使用 : 为参数添加默认值， 有了默认值，我们可以不用设置属性值也能被调用 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border_you</span>(<span class="variable">@color</span>:red)&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="selector-class">.border_you</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="selector-class">.border_you</span>(yellow);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其编译后的<span class="selector-tag">css</span>文件如下：</span><br><span class="line"></span><br><span class="line"><span class="comment">/*带参数并且有默认值的混合*/</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">h2</span>:hover &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ffff00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5命名参数（传实参时可以指定值给的是哪个参数）"><a href="#4-5命名参数（传实参时可以指定值给的是哪个参数）" class="headerlink" title="4.5命名参数（传实参时可以指定值给的是哪个参数）"></a>4.5命名参数（传实参时可以指定值给的是哪个参数）</h4><p> 引用mixin时可以通过参数名称而不是参数的位置来为mixin提供参数值。任何参数都以用过它的名称来使用，这样就不必按照任意特定的顺序来使用参数 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black; <span class="variable">@margin</span>: <span class="number">10px</span>; <span class="variable">@padding</span>: <span class="number">20px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@margin</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@margin</span>: <span class="number">20px</span>; <span class="variable">@color</span>: <span class="number">#33acfe</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#efca44</span>; <span class="variable">@padding</span>: <span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其编译后的<span class="selector-tag">css</span>文件如下:</span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#33acfe</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#efca44</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6匹配模式"><a href="#4-6匹配模式" class="headerlink" title="4.6匹配模式"></a>4.6匹配模式</h4><p> 根据传入的参数来改变混合的默认呈现</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(all,<span class="variable">@w</span>: <span class="number">5px</span>)&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(t_l,<span class="variable">@w</span>:<span class="number">5px</span>)&#123;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(t_r,<span class="variable">@w</span>:<span class="number">5px</span>)&#123;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(b-l,<span class="variable">@w</span>:<span class="number">5px</span>)&#123;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(b-r,<span class="variable">@w</span>:<span class="number">5px</span>)&#123;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(t_l,<span class="number">10px</span>);</span><br><span class="line">  <span class="selector-class">.border</span>(b-r,<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#33acfe</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其编译后的<span class="selector-tag">css</span>文件如下：</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> t_l <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> b-r <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#33acfe</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-arguments变量"><a href="#4-7-arguments变量" class="headerlink" title="4.7@arguments变量"></a>4.7@arguments变量</h4><p> @arguments代表所有的可变参数 </p><p><strong>注意事项：</strong></p><ol><li><p>@arguments代表所有可变参数，参数的先后顺序就是你的（）括号内的参数的先后顺序</p></li><li><p>在使用的赋值，值的位置和个数也是一一对应的，只有一个值，把值赋值给第一个，两个值，赋值给第一个和第二个，三个值赋值给第三个……以此类推，但是需要注意的是假如我想给第一个和第三个赋值，你不能写（值1，，值3），必须把原来的默认值写上去！</p></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@x</span>:solid,<span class="variable">@c</span>:red)&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span>&#123;</span><br><span class="line">  <span class="selector-class">.border</span>(solid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其编译后的<span class="selector-tag">css</span>文件为：</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">21px</span> solid <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8混合的返回值"><a href="#4-8混合的返回值" class="headerlink" title="4.8混合的返回值"></a>4.8混合的返回值</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</span><br><span class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</span><br><span class="line">  <span class="variable">@he:</span> (<span class="variable">@x</span> + <span class="variable">@y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@he</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">其编译后的<span class="selector-tag">css</span>文件如下：</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">66px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-运算"><a href="#5-运算" class="headerlink" title="5.运算"></a>5.运算</h3><h4 id="5-1数值运算"><a href="#5-1数值运算" class="headerlink" title="5.1数值运算"></a>5.1数值运算</h4><p> 只需要在其中的一个数值上加上单位，其他单位由less自动加上 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wp</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">450px</span> + <span class="number">450</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span> + <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2颜色运算"><a href="#5-2颜色运算" class="headerlink" title="5.2颜色运算"></a>5.2颜色运算</h4><p> Less在运算时，先将颜色值转换为rgb模式，然后再转换为16进制的颜色值并且返回 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;   <span class="attribute">Background</span>:<span class="number">#000000</span> + <span class="number">21</span>;  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Css</span>文件编译结果</span><br><span class="line"><span class="selector-class">.content</span>&#123;  <span class="attribute">background</span>:<span class="number">#212121</span>;  &#125;</span><br></pre></td></tr></table></figure><h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h3><h4 id="6-1RGB函数"><a href="#6-1RGB函数" class="headerlink" title="6.1RGB函数"></a>6.1RGB函数</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bgcolor</span>&#123; <span class="attribute">background</span>:rgb(<span class="number">0</span>,<span class="number">133</span>,<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Css</span>结果：</span><br><span class="line"><span class="selector-class">.bgcolor</span>&#123; <span class="attribute">background</span>:<span class="number">#008500</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="6-2Convert函数"><a href="#6-2Convert函数" class="headerlink" title="6.2Convert函数"></a>6.2Convert函数</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123; <span class="attribute">width</span>:convert(<span class="number">20cm</span>,px); &#125;  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Css</span>文件如下:</span><br><span class="line"><span class="selector-tag">body</span>&#123; <span class="attribute">width</span>:<span class="number">755.90551181px</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="7-命名空间"><a href="#7-命名空间" class="headerlink" title="7.命名空间"></a>7.命名空间</h3><p>多人协作时，避免选择器重名问题，引入命名空间的概念，以#开头代表命名空间，#namespace&gt;.selector即可调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#mynamespace</span>() &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="selector-class">.a</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.b</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bgcolor</span>&#123;</span><br><span class="line">    <span class="selector-id">#mynamespace</span>&gt;<span class="selector-class">.a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span>&#123;</span><br><span class="line"><span class="selector-id">#mynamespace</span>&gt;<span class="selector-class">.a</span>&gt;<span class="selector-class">.b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编译后<span class="selector-tag">css</span>文件</span><br><span class="line"><span class="selector-class">.bgcolor</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-避免编译"><a href="#8-避免编译" class="headerlink" title="8.避免编译"></a>8.避免编译</h3><p>将要避免编译的值用 “” 包裹起来，并在前面加~</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="string">~"ms:alwaysHasItsOwnSyntax.For.Stuff()"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">Css</span>文件如下:</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="attribute">ms</span>:alwaysHasItsOwnSyntax.For.Stuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-继承-extent"><a href="#9-继承-extent" class="headerlink" title="9.继承(extent)"></a>9.继承(extent)</h3><p>性能比混合高<br>继承不支持带参数，灵活度比混合低 </p><p>他将<strong>所放置它的选择器</strong>与<strong>匹配引用的选择器</strong>进行合并。 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; <span class="comment">// a 所放置它的选择器</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.b)</span>; <span class="comment">// .b匹配引用的选择器</span></span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编译后<span class="selector-tag">css</span>文件</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.b</span>, <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以在选择器后加 :extend(.selector, .selector 可选值all)表示继承，在<strong>括号内用逗号分隔多个继承元素</strong>，若有all可选值，hover等伪类也会继承</p><h3 id="10-条件表达式"><a href="#10-条件表达式" class="headerlink" title="10.条件表达式"></a>10.条件表达式</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">当我们想根据表达式进行匹配，而非根据值和参数匹配时，导引就显得非常有用。如果你对函数式编程非常熟悉，那么你很可能已经使用过导引。</span><br><span class="line"></span><br><span class="line">为了尽可能地保留<span class="selector-tag">CSS</span>的可声明性，<span class="selector-tag">LESS</span>通过导引混合而非<span class="selector-tag">if</span>/<span class="selector-tag">else</span>语句来实现条件判断，因为前者已在@<span class="selector-tag">media</span> <span class="selector-tag">query</span>特性中被定义。</span><br><span class="line"></span><br><span class="line">以此例做为开始：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &gt;= <span class="number">50%</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">when</span>关键字用以定义一个导引序列(此例只有一个导引)。接下来我们运行下列代码：</span><br><span class="line"></span><br><span class="line">.class1 &#123; <span class="selector-class">.mixin</span>(<span class="number">#ddd</span>) &#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">#555</span>) &#125;</span><br><span class="line">就会得到：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line">导引中可用的全部比较运算有： &gt; &gt;= = =&lt; &lt;。此外，关键字true只表示布尔真值，下面两个混合是相同的：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.truth</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span>) &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.truth</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> = true) &#123; ... &#125;</span><br><span class="line">除去关键字<span class="selector-tag">true</span>以外的值都被视示布尔假：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.truth</span>(<span class="number">40</span>); <span class="comment">// Will not match any of the above definitions.</span></span><br><span class="line">&#125;</span><br><span class="line">导引序列使用逗号‘,’—分割，当且仅当所有条件都符合时，才会被视为匹配成功。</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="number">10</span>), (<span class="variable">@a</span> &lt; -<span class="number">10</span>) &#123; ... &#125;</span><br><span class="line">导引可以无参数，也可以对参数进行比较运算：</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span>: mobile;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@media</span> = mobile) &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@media</span> = desktop) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.max</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="variable">@b</span>) &#123; <span class="attribute">width</span>: <span class="variable">@a</span> &#125;</span><br><span class="line"><span class="selector-class">.max</span> (<span class="variable">@a</span>, <span class="variable">@b</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &lt; <span class="variable">@b</span>) &#123; <span class="attribute">width</span>: <span class="variable">@b</span> &#125;</span><br><span class="line">最后，如果想基于值的类型进行匹配，我们就可以使用<span class="selector-tag">is</span>*函式：</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@b</span>: <span class="number">0</span>) <span class="keyword">when</span> (isnumber(<span class="variable">@b</span>)) &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>, <span class="variable">@b</span>: black) <span class="keyword">when</span> (iscolor(<span class="variable">@b</span>)) &#123; ... &#125;</span><br><span class="line">下面就是常见的检测函式：</span><br><span class="line">    <span class="selector-tag">iscolor</span></span><br><span class="line">    <span class="selector-tag">isnumber</span></span><br><span class="line">    <span class="selector-tag">isstring</span></span><br><span class="line">    <span class="selector-tag">iskeyword</span></span><br><span class="line">    <span class="selector-tag">isurl</span></span><br><span class="line">如果你想判断一个值是纯数字，还是某个单位量，可以使用下列函式：</span><br><span class="line">    <span class="selector-tag">ispixel</span></span><br><span class="line">    <span class="selector-tag">ispercentage</span></span><br><span class="line">    <span class="selector-tag">isem</span></span><br><span class="line">最后再补充一点，在导引序列中可以使用<span class="selector-tag">and</span>关键字实现与条件：</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (isnumber(<span class="variable">@a</span>)) <span class="keyword">and</span> (<span class="variable">@a</span> &gt; <span class="number">0</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">使用<span class="selector-tag">not</span>关键字实现或条件</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@b</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@b</span> &gt; <span class="number">0</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-注释&quot;&gt;&lt;a href=&quot;#1-注释&quot; class=&quot;headerlink&quot; title=&quot;1.注释&quot;&gt;&lt;/a&gt;1.注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以 // 开头的注释，不会被编译到css文件中&lt;/li&gt;
&lt;li&gt;以 /**/ 包裹的注释会被编译到css文件中
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Less" scheme="https://liang5757.github.io/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>重绘与回流</title>
    <link href="https://liang5757.github.io/2020/10/04/%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/"/>
    <id>https://liang5757.github.io/2020/10/04/%E9%87%8D%E7%BB%98%E4%B8%8E%E5%9B%9E%E6%B5%81/</id>
    <published>2020-10-03T16:08:15.000Z</published>
    <updated>2020-10-03T16:10:32.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><blockquote><p>通过构造渲染树，将可见DOM节点以及它对应的样式结合起来，这时候需要计算它们在设备视口(viewport)内的确切位置和大小，这个计算的阶段就是回流</p></blockquote><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><blockquote><p>通过构造渲染树和回流阶段，我们确定了可见节点，以及可见节点的样式和具体的几何信息(位置、大小)，将渲染树的每个节点都转换为屏幕上的实际像素，这个阶段就叫做重绘节点</p></blockquote><h2 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h2><p><img src= "/img/loading.gif" data-src="Snipaste_2020-10-03_17-43-05.png" alt="Snipaste_2020-10-03_17-43-05"></p><p>在页面加载时，浏览器渲染过程如下：</p><ol><li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li><li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给GPU，展示在页面上。（这一步其实还有很多内容，比如会在GPU将多个合成层合并为同一个层，并展示在页面中。而css3硬件加速的原理则是新建合成层）</li></ol><p>为了构建渲染树，浏览器主要完成了以下工作：</p><ol><li>从DOM树的根节点开始遍历每个可见节点。</li><li>对于每个可见的节点，找到CSSOM树中对应的规则，并应用它们。</li><li>根据每个可见节点以及其对应的样式，组合生成渲染树。</li></ol><p>渲染树中只会包含可见节点。不可见节点包括：</p><ul><li>一些不会渲染输出的节点，比如script、meta、link等。</li><li>一些通过css进行隐藏的节点。如display:none。</li></ul><blockquote><p>注意，利用visibility和opacity隐藏的节点，还是会显示在渲染树上的。</p></blockquote><blockquote><p>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算</p></blockquote><p>可见，<strong>如果触发回流那么必然会触发重绘</strong></p><h2 id="浏览器如何处理"><a href="#浏览器如何处理" class="headerlink" title="浏览器如何处理"></a>浏览器如何处理</h2><p>每句JS操作都去回流重绘的话，浏览器可能就会受不了。</p><p><strong>浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</strong></p><p>虽然有了浏览器的优化，但有时候我们写的一些代码可能会强制浏览器提前flush队列，这样浏览器的优化可能就起不到作用了。当你请求向浏览器请求一些 style信息的时候，就会让浏览器flush队列：</p><ol><li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li><li>scrollTop/Left/Width/Height</li><li>clientTop/Left/Width/Height</li><li>width,height</li><li>请求了getComputedStyle(), 或者 IE的 currentStyle</li></ol><p>当你请求上面的一些属性的时候，浏览器为了给你最精确的值，需要flush队列，因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近发生或改变的布局信息无关，浏览器都会强行刷新渲染队列。引擎会重新渲染来确保获取的值 是实时的</p><h2 id="利用合成层性能优化：Composite"><a href="#利用合成层性能优化：Composite" class="headerlink" title="利用合成层性能优化：Composite"></a>利用合成层性能优化：Composite</h2><blockquote><p>可以利用chrome开发者工具的Layers查看合成层</p></blockquote><p>提升为合成层简单说来有以下几点好处：</p><ol><li>合成层的位图，会<strong>交由 GPU 合成</strong>，比 CPU 处理要快</li><li>当需要 repaint 时，只需要 repaint 本身，<strong>不会影响到其他的层</strong></li><li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li></ol><blockquote><p>提升合成层的最好方式是使用 CSS 的 will-change 属性。而 will-change 设置为 opacity、transform、top、left、bottom、right 可以将元素提升为合成层。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#target</span> &#123;</span><br><span class="line">    will-change: transform; //兼容性不好</span><br><span class="line">&#125;</span><br><span class="line">//对于那些目前还不支持 will-change 属性的浏览器</span><br><span class="line">//目前常用的是使用一个 3D transform 属性来强制提升为合成层</span><br><span class="line"><span class="selector-id">#target</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>层合成的过程会产生内存消耗</strong>，所以不要盲目开启层合成</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/6844904161868251149" target="_blank" rel="noopener">https://juejin.im/post/6844904161868251149</a><br><a href="https://juejin.im/post/6844903859719143437#heading-1" target="_blank" rel="noopener">https://juejin.im/post/6844903859719143437#heading-1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回流&quot;&gt;&lt;a href=&quot;#回流&quot; class=&quot;headerlink&quot; title=&quot;回流&quot;&gt;&lt;/a&gt;回流&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过构造渲染树，将可见DOM节点以及它对应的样式结合起来，这时候需要计算它们在设备视口(viewport)内的确切
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端性能优化" scheme="https://liang5757.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流</title>
    <link href="https://liang5757.github.io/2020/09/29/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://liang5757.github.io/2020/09/29/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-09-29T12:21:30.000Z</published>
    <updated>2020-09-29T12:23:13.558Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="debounce.gif" alt="debounce"></p><p>上图是对鼠标进行监听，事件执行的很频繁，如果执行的事件是对接口的请求，那么会在短时间内发起大量重复请求，所以我们需要防抖或者节流进行解决。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><blockquote><p>防抖即为事件触发n秒后才执行事件，如果在n秒内又触发事件则重新计时</p></blockquote><h3 id="1-手写版"><a href="#1-手写版" class="headerlink" title="1. 手写版"></a>1. 手写版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="debounce-1.gif" alt="debounce-1"></p><p>移动完n秒后才执行事件</p><h3 id="2-可立即执行版"><a href="#2-可立即执行版" class="headerlink" title="2. 可立即执行版"></a>2. 可立即执行版</h3><p>触发事件立即执行，停止n秒后才可以重新触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate = true</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) clearTimeout(timer);</span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">            <span class="keyword">var</span> callNow = !timer;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="debounce-4.gif" alt="debounce-4"></p><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><blockquote><p>节流即为连续触发事件但是在n秒中只执行一次函数</p></blockquote><h3 id="1-时间戳版"><a href="#1-时间戳版" class="headerlink" title="1. 时间戳版"></a>1. 时间戳版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当鼠标移入的时候，事件<strong>立刻执行</strong>，每过1s会执行一次，如果在2.2s停止触发，之后不会再执行事件。</p><p><img src= "/img/loading.gif" data-src="throttle1.gif" alt="throttle1"></p><h3 id="2-定时器版"><a href="#2-定时器版" class="headerlink" title="2. 定时器版"></a>2. 定时器版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="throttle2.gif" alt="throttle2"></p><p>可以看到使用定时器版本的节流函数，鼠标移入并<strong>不会立即执行</strong>，此后每移动1秒执行一次函数，在3.2秒左右移出鼠标，但是仍会在4秒时执行函数</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/22</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/26</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;debounce.gif&quot; alt=&quot;debounce&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图是对鼠标进行监听，事件执行的很频繁，如果执行的事件是对接口的请求，那么会在短时间内发起大量重复请求，所以我们需要防抖或
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://liang5757.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Typescript语法篇</title>
    <link href="https://liang5757.github.io/2020/09/25/Typescript%E8%AF%AD%E6%B3%95%E7%AF%87/"/>
    <id>https://liang5757.github.io/2020/09/25/Typescript%E8%AF%AD%E6%B3%95%E7%AF%87/</id>
    <published>2020-09-25T09:14:10.000Z</published>
    <updated>2020-10-14T12:06:03.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-typescript的原始类型"><a href="#1-typescript的原始类型" class="headerlink" title="1.typescript的原始类型"></a>1.typescript的原始类型</h2><ol><li>boolean</li><li>number </li><li>string </li><li>void（只有<code>null</code>和<code>undefined</code>可以赋给<code>void</code>）</li><li>undefined 和 null（是所有类型的子类型，严格模式下只能赋值给对应的类型或者any）</li><li>symbol</li><li>bigint</li></ol><h2 id="2-Typescript-中其他常见类型"><a href="#2-Typescript-中其他常见类型" class="headerlink" title="2.Typescript 中其他常见类型"></a>2.Typescript 中其他常见类型</h2><ol><li>any（为任意类型）</li></ol><ul><li><strong>变量如果在声明的时候，未指定其类型或者初始化，那么它会被识别为any类型</strong></li></ul><ol start="2"><li><p>unknown</p><ul><li><p>较any类型更安全s</p></li><li><p>该类型变量被确定为某一类型前，不能进行任何操作</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value: unknown;</span><br><span class="line">   </span><br><span class="line">value.foo.bar;  <span class="comment">// ERROR</span></span><br><span class="line">value();        <span class="comment">// ERROR</span></span><br><span class="line"><span class="keyword">new</span> value();    <span class="comment">// ERROR</span></span><br><span class="line">value[<span class="number">0</span>][<span class="number">1</span>];    <span class="comment">// ERROR</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>never</p><ul><li><p>永不存在值的类型</p></li><li><p>是任何类型的子类型，可以赋值给任何类型</p></li><li><p>没有类型是 never 的子类型，任意类型都不能赋值给never类型（包括any）</p></li><li><p>常用在 <strong>抛出异常的函数</strong> 和 <strong>空数组且永远为空数组</strong></p></li></ul></li><li><p>数组类型(array)</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有两种定义方式</span></span><br><span class="line"><span class="keyword">const</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]<span class="comment">// 泛型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>元组(tuple)</p><ul><li>已知元素数量及类型的数组<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];<span class="comment">// 两个元素，类型顺序也不能变</span></span><br></pre></td></tr></table></figure></li><li>ts允许元组使用数组的push方法，但我们访问新加入的元素时会报错</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tuple: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'a'</span>, <span class="number">1</span>];</span><br><span class="line">tuple.push(<span class="number">2</span>); <span class="comment">// ok</span></span><br><span class="line"><span class="built_in">console</span>.log(tuple); <span class="comment">// ["a", 1, 2] -&gt; 正常打印出来</span></span><br><span class="line"><span class="built_in">console</span>.log(tuple[<span class="number">2</span>]); <span class="comment">// Tuple type '[string, number]' of length '2' has no element at index '2'</span></span><br></pre></td></tr></table></figure></li><li><p>object</p></li></ol><h2 id="3-枚举类型"><a href="#3-枚举类型" class="headerlink" title="3.枚举类型"></a>3.枚举类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">    Up,<span class="comment">// 0</span></span><br><span class="line">    Down = <span class="number">2</span>,<span class="comment">// 2</span></span><br><span class="line">    Left,<span class="comment">// 3</span></span><br><span class="line">    Right,  <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不带初始化的枚举 要么放在第一个位置， 要么在被数字常量或其它常量初始化的枚举后面，否则会报错</p><h3 id="3-1-枚举的本质"><a href="#3-1-枚举的本质" class="headerlink" title="3.1 枚举的本质"></a>3.1 枚举的本质</h3><p>枚举类型被编译为 JavaScript的形式如下所示，是具有双向映射的特性（字符串类型除外）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">    Direction[Direction[<span class="string">"Up"</span>] = <span class="number">0</span>] = <span class="string">"Up"</span>;</span><br><span class="line">    Direction[Direction[<span class="string">"Down"</span>] = <span class="number">2</span>] = <span class="string">"Down"</span>;</span><br><span class="line">    Direction[Direction[<span class="string">"Left"</span>] = <span class="number">3</span>] = <span class="string">"Left"</span>;</span><br><span class="line">    Direction[Direction[<span class="string">"Right"</span>] = <span class="number">4</span>] = <span class="string">"Right"</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br></pre></td></tr></table></figure><h3 id="3-2-const声明的枚举"><a href="#3-2-const声明的枚举" class="headerlink" title="3.2 const声明的枚举"></a>3.2 const声明的枚举</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = Direction.Up;</span><br></pre></td></tr></table></figure><p>会被编译为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-联合枚举与枚举成员的类型"><a href="#3-2-联合枚举与枚举成员的类型" class="headerlink" title="3.2 联合枚举与枚举成员的类型"></a>3.2 联合枚举与枚举成员的类型</h3><p><strong>如果枚举成员均有字面量类型组成，那么枚举的每个成员和枚举值本身都可以作为类型来使用</strong></p><ul><li>任何字符串字面量（例如： <code>&quot;foo&quot;</code>， <code>&quot;bar&quot;</code>， <code>&quot;baz&quot;</code>）</li><li>任何数字字面量（例如： <code>1</code>, <code>100</code>）</li><li>应用了一元 <code>-</code>符号的数字字面量（例如： <code>-1</code>, <code>-100</code>）</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> a: Direction</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Animal &#123;</span><br><span class="line">    Dog,</span><br><span class="line">    Cat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = Direction.Up <span class="comment">// ok</span></span><br><span class="line">a = Animal.Dog <span class="comment">// 不能将类型“Animal.Dog”分配给类型“Direction”</span></span><br></pre></td></tr></table></figure><h3 id="3-3-枚举合并"><a href="#3-3-枚举合并" class="headerlink" title="3.3 枚举合并"></a>3.3 枚举合并</h3><p>如果基于之前的Direction再定义了一个枚举类型的Direction，会合并成一整个</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Direction &#123;</span><br><span class="line">    Center = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-接口-interface"><a href="#5-接口-interface" class="headerlink" title="5.接口(interface)"></a>5.接口(interface)</h2><h3 id="5-1-属性修饰符"><a href="#5-1-属性修饰符" class="headerlink" title="5.1 属性修饰符"></a>5.1 属性修饰符</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">    readonly isMale: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>?：<strong>可选</strong>属性</li><li>readonly：<strong>只读</strong>属性</li></ul><h3 id="5-2-属性检查"><a href="#5-2-属性检查" class="headerlink" title="5.2 属性检查"></a>5.2 属性检查</h3><p>下面这个程序已经正确地类型化了，因为<code>width</code>属性是兼容的，不存在<code>color</code>属性，而且额外的<code>colour</code>属性是无意义的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: Config</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error: 'colour' not expected in type 'Config'</span></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>注意我们传入的参数是 <code>colour</code>，并不是 <code>color</code></p><blockquote><p>官方文档给了三种方式绕过这种检查</p></blockquote><p>第一种使用类型断言：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125; <span class="keyword">as</span> Config);</span><br></pre></td></tr></table></figure><p>第二种添加字符串索引签名：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样Config可以有任意数量的属性，并且只要不是width或color，那么就无所谓他们的类型是什么了。</p><p>第三种将字面量赋值给另外一个变量：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options: <span class="built_in">any</span> = &#123; widdth: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = CalculateAreas(options);</span><br></pre></td></tr></table></figure><h3 id="5-3-可索引类型"><a href="#5-3-可索引类型" class="headerlink" title="5.3 可索引类型"></a>5.3 可索引类型</h3><p>​    TypeScript支持两种索引签名：<strong>字符串</strong>和<strong>数字</strong>。 可以同时使用两种类型的索引，但是<strong>数字索引的返回值必须是字符串索引返回值类型的子类型</strong>。 这是因为当使用 <code>number</code>来索引时，JavaScript会将它转换成<code>string</code>然后再去索引对象。 也就是说用 <code>100</code>（一个<code>number</code>）去索引等同于使用<code>&quot;100&quot;</code>（一个<code>string</code>）去索引，因此两者需要保持一致。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引类型查询操作符"><a href="#索引类型查询操作符" class="headerlink" title="索引类型查询操作符"></a>索引类型查询操作符</h4><p><code>keyof</code>，即索引类型查询操作符，我们可以用 keyof 作用于泛型<code>T</code>上来获取泛型T上的所有 public 属性名构成联合类型。举个例子，有一个Images类，包含<code>src</code>和<code>alt</code>两个public属性，我们用<code>keyof</code>取属性名：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Images &#123;</span><br><span class="line">    <span class="keyword">public</span> src: <span class="built_in">string</span> = <span class="string">'https://www.google.com.hk/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png'</span></span><br><span class="line">    <span class="keyword">public</span> alt: <span class="built_in">string</span> = <span class="string">'谷歌'</span></span><br><span class="line">    <span class="keyword">public</span> width: <span class="built_in">number</span> = <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> propsNames = keyof Images</span><br></pre></td></tr></table></figure><p>效果如下：<br>![2019-06-26-06-17-29](D:\OneDrive - mail2.gdut.edu.cn\typora_img\Typescript语法篇\16dbb13efd03fd86)<br><code>keyof</code> 正是赋予了开发者查询索引类型的能力。</p><h4 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h4><p>映射类型的语法是<code>[K in Keys]</code>如果我们要把所有的属性成员变为可选类型，那么需要<code>T[K]</code>取出相应的属性值，最后我们重新生成一个可选的新类型<code>{ [K in keyof T]?: T[K] }</code>。</p><p>用类型别名表示就是：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> partial&lt;T&gt; = &#123; [K <span class="keyword">in</span> keyof T]?: T[K] &#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-继承接口"><a href="#5-4-继承接口" class="headerlink" title="5.4 继承接口"></a>5.4 继承接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> VIPUser <span class="keyword">extends</span> User &#123;</span><br><span class="line">    broadcast: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VIPUser具有User所有的属性</p><h2 id="6-类-Class"><a href="#6-类-Class" class="headerlink" title="6.类(Class)"></a>6.类(Class)</h2><h3 id="6-1抽象类"><a href="#6-1抽象类" class="headerlink" title="6.1抽象类"></a>6.1抽象类</h3><blockquote><p>通常作为派生类的基类使用，与接口不同的是抽象类可以包含成员的实现</p></blockquote><p>下面定义了一个Animal抽象类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line">    move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'roaming the earch...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接实例化Animal抽象类则会报错，我们可以创建子类继承基类，然后实例化子类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line"></span><br><span class="line">    makeSound() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'miao miao'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line"></span><br><span class="line">cat.makeSound() <span class="comment">// miao miao</span></span><br><span class="line">cat.move() <span class="comment">// roaming the earch...</span></span><br></pre></td></tr></table></figure><h3 id="6-2-访问限定符"><a href="#6-2-访问限定符" class="headerlink" title="6.2 访问限定符"></a>6.2 访问限定符</h3><ol><li>public<ul><li>类的成员默认为public</li><li>可被外部访问</li></ul></li><li>private<ul><li>只能类<strong>内部</strong>访问</li></ul></li><li>protected<ul><li>只能被类的<strong>内部</strong>以及类的<strong>子类</strong>访问</li></ul></li></ol><h3 id="6-3-存取器"><a href="#6-3-存取器" class="headerlink" title="6.3 存取器"></a>6.3 存取器</h3><p>属性具有get和set修饰符，<strong>只带有<code>get</code>不带有<code>set</code>的存取器自动被推断为<code>readonly</code></strong></p><h2 id="7-函数-Function"><a href="#7-函数-Function" class="headerlink" title="7. 函数(Function)"></a>7. 函数(Function)</h2><h3 id="7-1-函数类型"><a href="#7-1-函数类型" class="headerlink" title="7.1 函数类型"></a>7.1 函数类型</h3><p>在小括号后面声明返回值类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用接口定义函数的形状<br>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用函数表达式|接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。</p><h3 id="7-2-可选参数"><a href="#7-2-可选参数" class="headerlink" title="7.2 可选参数"></a>7.2 可选参数</h3><p>利用<code>?</code>或则<code>默认值</code>设置可选参数，<strong>？可选参数必须放最后</strong>，<strong>默认值没必要放最后，但是不放最后必须使用undefined显式获取默认值</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-剩余参数"><a href="#7-3-剩余参数" class="headerlink" title="7.3 剩余参数"></a>7.3 剩余参数</h3><p>剩余参数与JavaScript种的语法类似，需要用<code>...</code>来表示剩余参数，而剩余参数<code>rest</code>则是一个由number组成的数组，在本函数中用 reduce 进行了累加求和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (a: number, ...rest: number[]) &#x3D;&gt; rest.reduce(((a, b) &#x3D;&gt; a + b), a)</span><br></pre></td></tr></table></figure><h3 id="7-4-this参数"><a href="#7-4-this参数" class="headerlink" title="7.4 this参数"></a>7.4 this参数</h3><p>如果直接使用this进行一些操作,typescript会进行报错，可以提供一个显式的<code>this</code>参数,该参数是假的,但是可以使重用变得清晰</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    <span class="comment">// 注意:这个函数现在显式地指定它的被调用者必须是Deck类型</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.suits;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-重载-Overload"><a href="#7-5-重载-Overload" class="headerlink" title="7.5 重载(Overload)"></a>7.5 重载(Overload)</h3><p>函数根据传入不同的参数而返回不同类型的数据<br>查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个</p><p>下面的assigned只能传递1、2、4个参数,用重载可以很好的对不同的参数列表进行检测</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载</span></span><br><span class="line"><span class="keyword">interface</span> Direction &#123;</span><br><span class="line">  top: <span class="built_in">number</span>,</span><br><span class="line">  bottom?: <span class="built_in">number</span>,</span><br><span class="line">  left?: <span class="built_in">number</span>,</span><br><span class="line">  right?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assigned</span>(<span class="params">all: <span class="built_in">number</span></span>): <span class="title">Direction</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">assigned</span>(<span class="params">topAndBottom: <span class="built_in">number</span>, leftAndRight: <span class="built_in">number</span></span>): <span class="title">Direction</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">assigned</span>(<span class="params">top: <span class="built_in">number</span>, right: <span class="built_in">number</span>, bottom: <span class="built_in">number</span>, left: <span class="built_in">number</span></span>): <span class="title">Direction</span></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"></span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">assigned</span> (<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span>, c?: <span class="built_in">number</span>, d?: <span class="built_in">number</span></span>) </span>&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params">b === <span class="literal">undefined</span> &amp;&amp; c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span></span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="title">b</span> = <span class="title">c</span> = <span class="title">d</span> = <span class="title">a</span></span></span></span><br><span class="line"><span class="function"><span class="function">  &#125; <span class="title">else</span> <span class="title">if</span> (<span class="params">c === <span class="literal">undefined</span> &amp;&amp; d === <span class="literal">undefined</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">c</span> = <span class="title">a</span></span></span><br><span class="line"><span class="function">    <span class="title">d</span> = <span class="title">b</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="title">return</span> </span>&#123;</span><br><span class="line">    top: a,</span><br><span class="line">    right: b,</span><br><span class="line">    bottom: c,</span><br><span class="line">    left: d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assigned(<span class="number">1</span>)</span><br><span class="line">assigned(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">assigned(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">// 报错</span></span><br><span class="line">assigned(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="8-泛型-generic"><a href="#8-泛型-generic" class="headerlink" title="8. 泛型(generic)"></a>8. 泛型(generic)</h2><p>下图<code>T</code>为一种类型变量，用于表示一种类型而不是值，我们给identity添加了类型变量<code>T</code>。 <code>T</code>帮助我们捕获用户传入的类型（比如：<code>number</code>）。之后我们再次使用了<code>T</code>当做返回值类型，现在我们知道identity的参数类型和放回置类型是相同的了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-泛型接口"><a href="#8-1-泛型接口" class="headerlink" title="8.1 泛型接口"></a>8.1 泛型接口</h3><p>下图的<code>T</code>为整个接口的一个参数，而再使用<code>GenericIdentityFn</code>时，还得传入一个类型参数来指定泛型类型（这里是：<code>number</code>）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">    (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure><h3 id="8-2-泛型类"><a href="#8-2-泛型类" class="headerlink" title="8.2 泛型类"></a>8.2 泛型类</h3><p>与接口一样，直接把泛型类型放在类后面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="8-3-泛型约束"><a href="#8-3-泛型约束" class="headerlink" title="8.3 泛型约束"></a>8.3 泛型约束</h3><p>下面例子想要访问arg.length属性，但是是编译器并不能证明每种类型都有<code>length</code>属性，所以就报错了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Error: T doesn't have .length</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以定义一个接口来描述约束条件，然后需要传入符合约束类型的值，必须包含必须的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(<span class="number">3</span>);  <span class="comment">// Error, number doesn't have a .length property</span></span><br><span class="line">loggingIdentity(&#123;length: <span class="number">10</span>, value: <span class="number">3</span>&#125;); <span class="comment">// right</span></span><br></pre></td></tr></table></figure><h3 id="8-4-多重类型进行泛型约束"><a href="#8-4-多重类型进行泛型约束" class="headerlink" title="8.4 多重类型进行泛型约束"></a>8.4 多重类型进行泛型约束</h3><p>用<strong>交叉类型</strong><code>&amp;</code>进行多重约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FirstInterface &#123;</span><br><span class="line">  doSomething(): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SecondInterface &#123;</span><br><span class="line">  doSomethingElse(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Demo&lt;T <span class="keyword">extends</span> FirstInterface &amp; SecondInterface&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> genericProperty: T</span><br><span class="line"></span><br><span class="line">  useT() &#123;</span><br><span class="line">    <span class="keyword">this</span>.genericProperty.doSomething() <span class="comment">// right</span></span><br><span class="line">    <span class="keyword">this</span>.genericProperty.doSomethingElse() <span class="comment">// right</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5-泛型里使用类类型"><a href="#8-5-泛型里使用类类型" class="headerlink" title="8.5 泛型里使用类类型"></a>8.5 泛型里使用类类型</h3><p>我们假设需要声明一个泛型拥有构造函数，比如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">type</span>: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">type</span>() <span class="comment">// This expression is not constructable.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样会报错，因为我们没有声明<code>T</code>是构造函数，我们需要显式的用<code>new</code>来声明这个泛型<code>T</code>是构造函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">type</span>: &#123;<span class="keyword">new</span>(): T&#125;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">type</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数<code>type</code>的类型<code>{new(): T}</code>就表示此泛型<code>T</code>是可被构造的，在被实例化后的类型是泛型<code>T</code></p><p>一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> BeeKeeper &#123;</span><br><span class="line">    hasMask: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ZooKeeper &#123;</span><br><span class="line">    nametag: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    numLegs: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bee <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: BeeKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Lion <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    keeper: ZooKeeper;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">Animal</span>&gt;(<span class="params">c: <span class="keyword">new</span> () =&gt; A</span>): <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createInstance(Lion).keeper.nametag;  <span class="comment">// typechecks!</span></span><br><span class="line">createInstance(Bee).keeper.hasMask;   <span class="comment">// typechecks!</span></span><br></pre></td></tr></table></figure><h2 id="9-类型兼容性"><a href="#9-类型兼容性" class="headerlink" title="9. 类型兼容性"></a>9. 类型兼容性</h2><p>Ts结构化类型系统的基本规则是，如果<code>x</code>要兼容<code>y</code>，那么<code>y</code>至少具有与<code>x</code>相同的属性，编译器会检查<code>x</code>中的每个属性，看是否能在<code>y</code>中也找到对应属性</p><h2 id="10-高级类型"><a href="#10-高级类型" class="headerlink" title="10. 高级类型"></a>10. 高级类型</h2><h3 id="10-1-交叉类型"><a href="#10-1-交叉类型" class="headerlink" title="10.1 交叉类型"></a>10.1 交叉类型</h3><p>用<code>&amp;</code>可以将多个类型合并为一个类型</p><h3 id="10-2-联合类型"><a href="#10-2-联合类型" class="headerlink" title="10.2 联合类型"></a>10.2 联合类型</h3><p>用<code>|</code>表示一个值可为几种类型之一</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCommandline</span>(<span class="params">command: <span class="built_in">string</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> line = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> command === <span class="string">'string'</span>) &#123;</span><br><span class="line">    line = command.trim();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    line = command.join(<span class="string">' '</span>).trim();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-类型别名"><a href="#10-3-类型别名" class="headerlink" title="10.3 类型别名"></a>10.3 类型别名</h3><p><code>type</code>虽然看起来和interface一样，但是可以用在原始类型、联合类型、元组等需要手写的类型，<strong>类型别名也可以是泛型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> some = <span class="built_in">boolean</span> | <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b: some = <span class="literal">true</span> <span class="comment">// ok</span></span><br><span class="line"><span class="keyword">const</span> c: some = <span class="string">'hello'</span> <span class="comment">// ok</span></span><br><span class="line"><span class="keyword">const</span> d: some = <span class="number">123</span> <span class="comment">// 不能将类型“123”分配给类型“some”</span></span><br></pre></td></tr></table></figure><p>类型别名和接口的区别</p><ol><li>类型别名不能被<code>extends</code>和<code>implements</code>（自己也不能<code>extends</code>和<code>implements</code>其它类型）</li><li>interface 可以实现接口合并声明</li></ol><h3 id="10-4-条件类型"><a href="#10-4-条件类型" class="headerlink" title="10.4 条件类型"></a>10.4 条件类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T <span class="keyword">extends</span> U ? X : Y</span><br></pre></td></tr></table></figure><p>上面的代码可以理解为: 若 <code>T</code> 能够赋值给 <code>U</code>，那么类型是 <code>X</code>，否则为 <code>Y</code>,有点类似于JavaScript中的三元条件运算符</p><h2 id="11-类型保护和类型断言"><a href="#11-类型保护和类型断言" class="headerlink" title="11. 类型保护和类型断言"></a>11. 类型保护和类型断言</h2><h3 id="11-1-！"><a href="#11-1-！" class="headerlink" title="11.1 ！"></a>11.1 ！</h3><blockquote><p>类型检查器认为 <code>null</code>与 <code>undefined</code>可以赋值给任何类型</p></blockquote><p>可以使用<code>--strictNullChecks</code>来使变量不自动的包含<code>null</code>或 <code>undefined</code>，但是开启后可选参数会被自动地加上<code>| undefined</code>。</p><p>如果编译器不能够去除 <code>null</code>或 <code>undefined</code>，你可以使用<strong>类型断言</strong>手动去除。 语法是添加<code>!</code>后缀： <code>identifier!</code>从 <code>identifier</code>的类型里去除了 <code>null</code>和 <code>undefined</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">broken</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// error, 'name' is possibly null</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">"Bob"</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">"great"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fixed</span>(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">postfix</span>(<span class="params">epithet: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name!.charAt(<span class="number">0</span>) + <span class="string">'.  the '</span> + epithet; <span class="comment">// ok</span></span><br><span class="line">  &#125;</span><br><span class="line">  name = name || <span class="string">"Bob"</span>;</span><br><span class="line">  <span class="keyword">return</span> postfix(<span class="string">"great"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-is进行类型保护"><a href="#11-2-is进行类型保护" class="headerlink" title="11.2 is进行类型保护"></a>11.2 is进行类型保护</h3><p>is之后的类型必须是参数类型中的一个，在后续调用改参数时，ts会将变量缩减为那个具体的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">test: <span class="built_in">any</span></span>): <span class="title">test</span> <span class="title">is</span> <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> test === <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">foo: <span class="built_in">number</span> | <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isString(foo))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'it is a string'</span> + foo);</span><br><span class="line">        <span class="comment">// 如果上面没写test is string，foo.length将会报错</span></span><br><span class="line">        <span class="built_in">console</span>.log(foo.length); <span class="comment">// string function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">example(<span class="string">'hello world'</span>);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.tslang.cn/docs/handbook" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook</a><br><a href="https://ts.xcatliu.com/basics/type-of-function.html" target="_blank" rel="noopener">https://ts.xcatliu.com/basics/type-of-function.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-typescript的原始类型&quot;&gt;&lt;a href=&quot;#1-typescript的原始类型&quot; class=&quot;headerlink&quot; title=&quot;1.typescript的原始类型&quot;&gt;&lt;/a&gt;1.typescript的原始类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;bool
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ts" scheme="https://liang5757.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>学习css的网站</title>
    <link href="https://liang5757.github.io/2020/09/20/%E5%AD%A6%E4%B9%A0css%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>https://liang5757.github.io/2020/09/20/%E5%AD%A6%E4%B9%A0css%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2020-09-20T08:42:39.000Z</published>
    <updated>2020-09-24T11:06:33.892Z</updated>
    
    <content type="html"><![CDATA[<p>codepen：<a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a><br>css常见布局：<a href="https://csslayout.io/patterns/" target="_blank" rel="noopener">https://csslayout.io/patterns/</a><br>常见加载动画：<a href="https://tobiasahlin.com/spinkit/" target="_blank" rel="noopener">https://tobiasahlin.com/spinkit/</a><br>常见css效果：<a href="https://emilkowalski.github.io/css-effects-snippets/" target="_blank" rel="noopener">https://emilkowalski.github.io/css-effects-snippets/</a><br>css灵感：<a href="https://chokcoco.github.io/CSS-Inspiration/#/" target="_blank" rel="noopener">https://chokcoco.github.io/CSS-Inspiration/#/</a><br>自定义css组件：<a href="https://animista.net/" target="_blank" rel="noopener">https://animista.net/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;codepen：&lt;a href=&quot;https://codepen.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codepen.io/&lt;/a&gt;&lt;br&gt;css常见布局：&lt;a href=&quot;https://csslayout.io/pat
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>EventBus的一种使用场景</title>
    <link href="https://liang5757.github.io/2020/09/17/EventBus%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://liang5757.github.io/2020/09/17/EventBus%E7%9A%84%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2020-09-17T11:38:58.000Z</published>
    <updated>2020-09-17T12:00:47.446Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>所谓事件总线，就是实例化Vue对象，在该实例上通过<code>$on</code>绑定事件、<code>$emit</code>触发事件、<code>$off</code>解绑事件，进行组件通信。</p></blockquote><h2 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h2><p>实例化Vue对象，并挂载到Vue.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><h2 id="二、场景"><a href="#二、场景" class="headerlink" title="二、场景"></a>二、场景</h2><blockquote><p>在多个页面复用一个组件时，每个页面需要有点击按钮后，触发不同的事件</p></blockquote><p>当然可以监听路由进行判断调用不同的函数，但是这样会在一个组件内写上很多其他组件应该触发的事件。</p><p><strong>我们利用EventBus可以做到组件间的解耦</strong></p><h2 id="三、使用方法"><a href="#三、使用方法" class="headerlink" title="三、使用方法"></a>三、使用方法</h2><p>1.我们在各个页面上写好事件触发后调用的函数，然后在mounted（如果用keep-alive则是在activated，否则只挂载一次）<code>this.$bus.$on</code>上绑定该事件，在beforeDestory（如果用keep-alive则是在deactived，否则无法解绑事件）上用<code>this.$bus.$off</code>解绑事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$on(<span class="string">"save"</span>, <span class="keyword">this</span>.save);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">beforeDestory() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.$off(<span class="string">"save"</span>, <span class="keyword">this</span>.save);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我没有写在复用组件上哦！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.然后在复用的组件上触发事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$bus.$emit(&#39;save&#39;);</span><br></pre></td></tr></table></figure><p>也算是第一次尝试使用EventBus把，很好的降低了组件间的耦合度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;所谓事件总线，就是实例化Vue对象，在该实例上通过&lt;code&gt;$on&lt;/code&gt;绑定事件、&lt;code&gt;$emit&lt;/code&gt;触发事件、&lt;code&gt;$off&lt;/code&gt;解绑事件，进行组件通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://liang5757.github.io/tags/vue/"/>
    
      <category term="技巧" scheme="https://liang5757.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>对于点歌台总结vuex持久化处理的补充</title>
    <link href="https://liang5757.github.io/2020/09/16/%E5%AF%B9%E4%BA%8E%E7%82%B9%E6%AD%8C%E5%8F%B0%E6%80%BB%E7%BB%93vuex%E6%8C%81%E4%B9%85%E5%8C%96%E5%A4%84%E7%90%86%E7%9A%84%E8%A1%A5%E5%85%85/"/>
    <id>https://liang5757.github.io/2020/09/16/%E5%AF%B9%E4%BA%8E%E7%82%B9%E6%AD%8C%E5%8F%B0%E6%80%BB%E7%BB%93vuex%E6%8C%81%E4%B9%85%E5%8C%96%E5%A4%84%E7%90%86%E7%9A%84%E8%A1%A5%E5%85%85/</id>
    <published>2020-09-16T12:25:18.000Z</published>
    <updated>2020-09-16T12:42:58.262Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>针对刷新时vuex数据丢失，使用了vuex-persistedstate对vuex进行持久化处理<br>官方github：<a href="https://github.com/robinvdvleuten/vuex-persistedstate" target="_blank" rel="noopener">https://github.com/robinvdvleuten/vuex-persistedstate</a></p></blockquote><p>本文主要是对官网不够详细的案例进行补充，官网只讲了对vuex完全存储和对vuex模块的完全存储。<br>但是我想对某一模块内部一些变量进行存储，谷歌了好多都没找到写法，自己试出来了。</p><ol><li>首先引入vuex-persistedstate</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">"vuex-persistedstate"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用官网给的reducer减少持久化的数据</li></ol><p><img src= "/img/loading.gif" data-src="image-20200916201819305.png" alt="image-20200916201819305"></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        projectDetail</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    plugins: [createPersistedState(&#123;</span><br><span class="line">        reducer(val) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                staffId: val.staffId,</span><br><span class="line">                projectDetail: &#123;</span><br><span class="line">                    curPjId: val.projectDetail.curPjId,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看到该vuex结构具有projectDetail模块，我想对该模块内的curPjId进行<strong>单独</strong>存储，在reducer放回的对象的键设为模块名，里面写着想要持久化的变量，就可以了。</p><p>会在localstorage存储为如下所示</p><p><img src= "/img/loading.gif" data-src="image-20200916202437681.png" alt="image-20200916202437681"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;针对刷新时vuex数据丢失，使用了vuex-persistedstate对vuex进行持久化处理&lt;br&gt;官方github：&lt;a href=&quot;https://github.com/robinvdvleuten/vuex-persistedstate&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://liang5757.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>element的表单验证效果替换</title>
    <link href="https://liang5757.github.io/2020/09/15/element%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%95%88%E6%9E%9C%E6%9B%BF%E6%8D%A2/"/>
    <id>https://liang5757.github.io/2020/09/15/element%E7%9A%84%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E6%95%88%E6%9E%9C%E6%9B%BF%E6%8D%A2/</id>
    <published>2020-09-15T14:17:25.000Z</published>
    <updated>2020-09-16T12:27:14.619Z</updated>
    
    <content type="html"><![CDATA[<p>在做项目的时候看到了这个需求，需要用图片替换默认的文字显示</p><p><img src= "/img/loading.gif" data-src="image-20200915220854381.png" alt="image-20200915220854381"></p><p>f12可以看到出错了的表单项会在<code>div.el-form-item__content</code>下有个<code>div.el-form-item__error</code></p><p><img src= "/img/loading.gif" data-src="image-20200915221210128.png" alt="image-20200915221210128"></p><p>于是就对<code>div.el-form-item__error</code>进行操作</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/deep/ .el-form-item__content &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;<span class="comment">// 使错误信息显示在同一行</span></span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改错误显示</span></span><br><span class="line">    /deep/ .el-form-item__error &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0</span>;<span class="comment">// 把默认文字取消</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用伪元素插入背景图片</span></span><br><span class="line">        &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">background</span>: url(<span class="string">"~@/assets/img/error.png"</span>) <span class="number">0</span> <span class="number">0</span> no-repeat;</span><br><span class="line">            <span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在做项目的时候看到了这个需求，需要用图片替换默认的文字显示&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;image-20200915220854381.png&quot; alt=&quot;image-20200915220854381&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="技巧" scheme="https://liang5757.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>微信网页授权</title>
    <link href="https://liang5757.github.io/2020/08/18/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    <id>https://liang5757.github.io/2020/08/18/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/</id>
    <published>2020-08-18T09:57:39.000Z</published>
    <updated>2020-08-18T09:58:39.497Z</updated>
    
    <content type="html"><![CDATA[<p>照着官方教程设置好JS接口安全域名并且把文件放到服务器后</p><p>首先需要引入<code>weixin-js-sdk</code></p><p>然后创建一个文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">weixinShare</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios</span><br><span class="line">    .get(<span class="string">`<span class="subst">$&#123;base.BASE_URL&#125;</span>/share`</span>, &#123;</span><br><span class="line">      params: &#123; <span class="attr">url</span>: location.href.split(<span class="string">"#"</span>)[<span class="number">0</span>] &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        data: &#123; code, data &#125;,</span><br><span class="line">      &#125; = res;</span><br><span class="line">      <span class="keyword">if</span> (code === <span class="number">200</span>) &#123;</span><br><span class="line">        wx.config(&#123;<span class="comment">// 获取微信接口的权限</span></span><br><span class="line">          appId: appId, <span class="comment">// 必填，企业号的唯一标识，此处填写企业号corpid</span></span><br><span class="line">          timestamp: data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">          nonceStr: data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">          signature: data.signature, <span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">          jsApiList: [</span><br><span class="line">            <span class="string">"updateAppMessageShareData"</span>,</span><br><span class="line">            <span class="string">"onMenuShareTimeline"</span>,</span><br><span class="line">            <span class="string">"onMenuShareAppMessage"</span>,</span><br><span class="line">          ], <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> imgUrl = <span class="string">"imgUrl"</span>;</span><br><span class="line">        <span class="keyword">let</span> title = <span class="string">"title"</span>;</span><br><span class="line">        <span class="keyword">let</span> desc = <span class="string">""</span>;</span><br><span class="line">        axios.get(<span class="string">`<span class="subst">$&#123;base.BASE_URL&#125;</span>/random_link`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123;</span><br><span class="line">            data: &#123; data, code &#125;,</span><br><span class="line">          &#125; = res;</span><br><span class="line">          <span class="keyword">if</span> (code === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.linkImage) &#123;</span><br><span class="line">              imgUrl = data.linkImage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data.linkTittle) &#123;</span><br><span class="line">              title = data.linkTittle;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data.linkContent) &#123;</span><br><span class="line">              desc = data.linkContent</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">          wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 分享给朋友 及 分享到QQ</span></span><br><span class="line">            wx.updateAppMessageShareData(&#123;</span><br><span class="line">              title: title, <span class="comment">// 分享标题，（必填，否则失效）</span></span><br><span class="line">              desc: desc, <span class="comment">// 分享描述</span></span><br><span class="line">              link: link, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">              imgUrl: imgUrl, <span class="comment">// 分享图标（必填，否则失效）</span></span><br><span class="line">              success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              fail: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(err));</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 分享到朋友圈</span></span><br><span class="line">            wx.onMenuShareTimeline(&#123;</span><br><span class="line">              title: data.linkTittle, <span class="comment">// 分享标题</span></span><br><span class="line">              link: link, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">              imgUrl: imgUrl, <span class="comment">// 分享图标</span></span><br><span class="line">              success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">              fail: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(err));</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeEnter(to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    weixinShare().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'res: '</span>, res);</span><br><span class="line">        next();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在进入页面前调用该接口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;照着官方教程设置好JS接口安全域名并且把文件放到服务器后&lt;/p&gt;
&lt;p&gt;首先需要引入&lt;code&gt;weixin-js-sdk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后创建一个文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信网页" scheme="https://liang5757.github.io/tags/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>点歌台项目总结</title>
    <link href="https://liang5757.github.io/2020/08/18/%E7%82%B9%E6%AD%8C%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://liang5757.github.io/2020/08/18/%E7%82%B9%E6%AD%8C%E5%8F%B0%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-18T09:55:19.000Z</published>
    <updated>2020-08-18T09:57:14.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-img标签src为空的异常样式"><a href="#1-img标签src为空的异常样式" class="headerlink" title="1. img标签src为空的异常样式"></a>1. img标签src为空的异常样式</h2><p>根据用户性别来显示不同的图标，但是如果获取失败，导致img的src为空从而显示异常处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 解决src为空的异常样式</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src=<span class="string">""</span>]</span>,</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[src]</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Safari碰到的问题"><a href="#2-Safari碰到的问题" class="headerlink" title="2.Safari碰到的问题"></a>2.Safari碰到的问题</h2><h3 id="2-1-伪类active失效"><a href="#2-1-伪类active失效" class="headerlink" title="2.1 伪类active失效"></a>2.1 伪类active失效</h3><p>在按钮元素或body/html上绑定一个touchstart事件才能激活:active状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2-input和textarea有上内阴影"><a href="#2-2-input和textarea有上内阴影" class="headerlink" title="2.2 input和textarea有上内阴影"></a>2.2 input和textarea有上内阴影</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</span><br></pre></td></tr></table></figure><h2 id="3-移动端布局"><a href="#3-移动端布局" class="headerlink" title="3.移动端布局"></a>3.移动端布局</h2><p><img src= "/img/loading.gif" data-src="image-20200818013423199.png" alt="image-20200818013423199"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>11<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page</span> &#123;<span class="comment">// 整体flex竖式布局</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;<span class="comment">// 内容容器</span></span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">    -webkit-<span class="attribute">overflow</span>-scrolling: touch;  <span class="comment">// 移动回弹</span></span><br><span class="line"></span><br><span class="line">    &amp;::-webkit-scrollbar &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span> &#123;<span class="comment">// 具体内容</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-textarea把icon图片显示在输入前"><a href="#4-textarea把icon图片显示在输入前" class="headerlink" title="4. textarea把icon图片显示在输入前"></a>4. textarea把icon图片显示在输入前</h2><p><img src= "/img/loading.gif" data-src="image-20200818014542667.png" alt="image-20200818014542667"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">23px</span>;</span><br><span class="line">    </span><br><span class="line">    &amp;::placeholder &#123;</span><br><span class="line">      text-indent: <span class="number">23px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<strong>text-indent</strong>来使输入光标后置，然后图片用定位设置在指定位置</p><h2 id="5-ios弹键盘-上移布局且不恢复"><a href="#5-ios弹键盘-上移布局且不恢复" class="headerlink" title="5. ios弹键盘 上移布局且不恢复"></a>5. ios弹键盘 上移布局且不恢复</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur.prevent</span>=<span class="string">"checkValue"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">checkValue () &#123; </span><br><span class="line">    inputBlur()</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">'checkValue'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inputBlur() &#123;</span><br><span class="line">    <span class="keyword">let</span> u = navigator.userAgent;</span><br><span class="line">    <span class="keyword">let</span> isIOS = !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line">    <span class="keyword">if</span> (isIOS) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> scrollHeight =</span><br><span class="line">                  <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="built_in">Math</span>.max(scrollHeight - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-滑块样式"><a href="#6-滑块样式" class="headerlink" title="6.滑块样式"></a>6.滑块样式</h2><p><img src= "/img/loading.gif" data-src="slide-btn.gif" alt="slide-btn"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"slide-btn"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-btn</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-btn</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e9ddd8</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slide-btn</span><span class="selector-pseudo">:checked</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff4f0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff4f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-btn</span><span class="selector-pseudo">:checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff935f</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-背景颜色和背景图片同时设置"><a href="#7-背景颜色和背景图片同时设置" class="headerlink" title="7. 背景颜色和背景图片同时设置"></a>7. 背景颜色和背景图片同时设置</h2><p><strong>前面的背景会叠在之后的背景之上，所以背景色通常都定义在最后一组上，避免背景色将图像盖住</strong></p><h2 id="8-文字超出处理"><a href="#8-文字超出处理" class="headerlink" title="8. 文字超出处理"></a>8. 文字超出处理</h2><h3 id="8-1-一行超出省略"><a href="#8-1-一行超出省略" class="headerlink" title="8.1 一行超出省略"></a>8.1 一行超出省略</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: nowrap; <span class="comment">// 不换行</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis; <span class="comment">// 省略号</span></span><br></pre></td></tr></table></figure><p>触发text-overflow需要</p><ul><li>overflow为非visible</li><li>显式或隐式定义width值</li><li>white-space为非nowrap值</li></ul><h3 id="8-2-最多两行，超出利用展开收起"><a href="#8-2-最多两行，超出利用展开收起" class="headerlink" title="8.2 最多两行，超出利用展开收起"></a>8.2 最多两行，超出利用展开收起</h3><p>兼容性不太好</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.show2line</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    -webkit-line-clamp: <span class="number">2</span>; <span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">    -webkit-box-orient: vertical; <span class="comment">/* 垂直排列 */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showAll</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-部分机型设置透明度0-x会完全透明"><a href="#9-部分机型设置透明度0-x会完全透明" class="headerlink" title="9. 部分机型设置透明度0.x会完全透明"></a>9. 部分机型设置透明度0.x会完全透明</h2><h2 id="10-刷新会导致vuex丢失一段时间"><a href="#10-刷新会导致vuex丢失一段时间" class="headerlink" title="10. 刷新会导致vuex丢失一段时间"></a>10. 刷新会导致vuex丢失一段时间</h2><p>目前的解决方案是存localstorage或者从router.query获取，还看到有用vuex-persistedstate。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-img标签src为空的异常样式&quot;&gt;&lt;a href=&quot;#1-img标签src为空的异常样式&quot; class=&quot;headerlink&quot; title=&quot;1. img标签src为空的异常样式&quot;&gt;&lt;/a&gt;1. img标签src为空的异常样式&lt;/h2&gt;&lt;p&gt;根据用户性别来显
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目总结" scheme="https://liang5757.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>js中的变量声明</title>
    <link href="https://liang5757.github.io/2020/07/31/js%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"/>
    <id>https://liang5757.github.io/2020/07/31/js%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</id>
    <published>2020-07-31T09:14:10.000Z</published>
    <updated>2020-07-31T09:14:26.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js中的变量声明"><a href="#js中的变量声明" class="headerlink" title="js中的变量声明"></a>js中的变量声明</h2><h2 id="一、-es5和es6中变量声明的区别"><a href="#一、-es5和es6中变量声明的区别" class="headerlink" title="一、 es5和es6中变量声明的区别"></a>一、 es5和es6中变量声明的区别</h2><table><thead><tr><th></th><th>变量提升</th><th>块级作用域</th><th>重复声明</th></tr></thead><tbody><tr><td>var</td><td>会</td><td>无</td><td>能</td></tr><tr><td>let、const</td><td>不会</td><td>有</td><td>不能</td></tr></tbody></table><h2 id="二、各种变量声明的特点"><a href="#二、各种变量声明的特点" class="headerlink" title="二、各种变量声明的特点"></a>二、各种变量声明的特点</h2><h3 id="1-var"><a href="#1-var" class="headerlink" title="1. var"></a>1. var</h3><p>当var被作用于全局作用域时，他会把变量作为<strong>全局对象（浏览器环境中的window对象）的属性</strong></p><p>由于没有块级作用域，所以任何位置的变量的声明在<strong>js引擎扫描代码</strong>的时候，将其<strong>提升至所在作用域的顶部</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">condition</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"><span class="keyword">var</span> value = <span class="string">"blue"</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 此处可访问变量value，其值为undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被js引擎解析成如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">condition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value;<span class="comment">// value的生命提升到所在作用域的顶部</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">value = <span class="string">"blue"</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 此处可访问变量value，其值为undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-let-const的共同特点"><a href="#2-let-const的共同特点" class="headerlink" title="2. let/const的共同特点"></a>2. let/const的共同特点</h3><h4 id="2-1-具有块级作用域"><a href="#2-1-具有块级作用域" class="headerlink" title="2.1 具有块级作用域"></a>2.1 具有块级作用域</h4><p>存在于</p><ul><li>函数内部</li><li>块中（字符 { 和 } 之间的区域）</li></ul><h5 id="循环中的块级作用域绑定"><a href="#循环中的块级作用域绑定" class="headerlink" title="循环中的块级作用域绑定"></a>循环中的块级作用域绑定</h5><p>var声明使得变量到循环外仍能访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">funcs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">func();<span class="comment">// 输出10次数字10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以使用<strong>立即执行函数（IIFE）</strong>，<strong>为接受的每一个参数i都创建了一个副本并储存为变量value</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环修改成</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">funcs.push((<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在es6中的<strong>let</strong>简化了这个过程，<strong>每次迭代循环都会创建一个新变量，并以之前迭代中同名变量的值将其初始化</strong></p><p><strong>特别的</strong>如果在for循环中用<strong>const替换了let</strong>，则<strong>const声明的变量不能在后续的循环中被修改</strong>，而在<strong>for-in或for-of循环中使用const时的行为与使用let一致</strong>，因为每次迭代是<strong>创建一个新绑定</strong></p><h4 id="2-2-禁止重复声明"><a href="#2-2-禁止重复声明" class="headerlink" title="2.2 禁止重复声明"></a><strong>2.2 禁止重复声明</strong></h4><p>​    会报 <strong>Identifier ‘变量’ has already been declared</strong> 的错</p><h4 id="2-3-暂时性死区（Temporal-Dead-Zone）"><a href="#2-3-暂时性死区（Temporal-Dead-Zone）" class="headerlink" title="2.3 暂时性死区（Temporal Dead Zone）"></a>2.3 暂时性死区（Temporal Dead Zone）</h4><p>js引擎在扫描代码的时候发现<strong>let</strong>或者<strong>const</strong>声明的变量，会将他<strong>放到TDZ</strong>，访问TDZ中的变量会触发运行时错误，<strong>只有执行过变量声明语句后，才会把变量从TDZ中移除</strong></p><p>由于块级作用域，<strong>所以在声明的变量的作用域外使用则不会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> value);<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">   <span class="keyword">let</span> value = <span class="string">"blue"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、函数声明"><a href="#三、函数声明" class="headerlink" title="三、函数声明"></a>三、函数声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果两种声明方式声明同一个函数名，最终执行的是 函数表达式</span></span><br><span class="line">f();<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol><li>第一种方式：函数只能在声明之后调用，因为这种函数声明是在函数运行的阶段才赋值给变量 f 的</li><li>第二种方式：函数可以在声明函数的作用域内任一地方调用。因为这种方式，是在函数解析阶段赋值给标识符 f .</li></ol><p><strong>函数声明提升优先于变量提升，且不会被变量声明覆盖，但是会被变量赋值覆盖</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);<span class="comment">// [Function: foo]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"函数变量"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"变量"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo)<span class="comment">//string</span></span><br></pre></td></tr></table></figure><p>下面来看一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        test = a;<span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    test(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> test);<span class="comment">// number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> test);<span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>由于函数提升，会提升到块级作用域外，所以输出外层的test的类型为function，由于块级作用域，<strong>变量重写只能在块内生效</strong></p><p><strong>参考文章</strong><br><a href="https://zhuanlan.zhihu.com/p/126237126" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/126237126</a><br><a href="https://www.cnblogs.com/miacara94/p/9173843.html" target="_blank" rel="noopener">https://www.cnblogs.com/miacara94/p/9173843.html</a><br>《深入理解ES6》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js中的变量声明&quot;&gt;&lt;a href=&quot;#js中的变量声明&quot; class=&quot;headerlink&quot; title=&quot;js中的变量声明&quot;&gt;&lt;/a&gt;js中的变量声明&lt;/h2&gt;&lt;h2 id=&quot;一、-es5和es6中变量声明的区别&quot;&gt;&lt;a href=&quot;#一、-es5和es6中
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>事件 Event</title>
    <link href="https://liang5757.github.io/2020/07/31/%E4%BA%8B%E4%BB%B6-Event/"/>
    <id>https://liang5757.github.io/2020/07/31/%E4%BA%8B%E4%BB%B6-Event/</id>
    <published>2020-07-31T09:13:17.000Z</published>
    <updated>2020-07-31T09:13:39.917Z</updated>
    
    <content type="html"><![CDATA[<p><strong>事件</strong>是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现的时候触发某种信号并且会提供一个自动加载某种动作，列举一些可能发生的事件。</p><ul><li>用户在某个元素上点击鼠标或悬停光标。</li><li>用户在键盘中按下某个按键。</li><li>用户调整浏览器的大小或者关闭浏览器窗口。</li><li>一个网页停止加载。</li><li>提交表单。</li><li>播放、暂停、关闭视频。</li><li>发生错误。</li></ul><h3 id="1-事件处理器"><a href="#1-事件处理器" class="headerlink" title="1.事件处理器"></a>1.事件处理器</h3><p>可以为每一个事件绑定一个<strong>事件处理器</strong>(<strong>事件监听器</strong>)，用以事件被激发时做出的回应，有三种事件处理器。</p><h4 id="1-1-事件处理器属性（DOM0级）"><a href="#1-1-事件处理器属性（DOM0级）" class="headerlink" title="1.1 事件处理器属性（DOM0级）"></a>1.1 事件处理器属性（DOM0级）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;alert(<span class="string">'Hello world'</span>);&#125;;</span><br></pre></td></tr></table></figure><p>该函数在定义时，可以传入一个 <code>event</code> 形式的参数，该方式的问题在于一次只能绑定一个。</p><p>除了onclick还有一些常见的事件处理器属性</p><table><thead><tr><th align="left">事件处理器属性</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">btn.onfocus</td><td align="left">当前元素获得键盘焦点时会触发<code>focus</code>事件</td></tr><tr><td align="left">btn.onblur</td><td align="left">当一个元素失去焦点时会触发<code>blur</code>事件</td></tr><tr><td align="left">btn.ondblclick</td><td align="left">当前元素上双击鼠标左键会触发<code>dblclick</code>事件</td></tr><tr><td align="left">window.onkeypress</td><td align="left">当用户在键盘上按下任意键时，<strong>应当</strong>会触发 keypress 事件</td></tr><tr><td align="left">window.onkeydown</td><td align="left">当用户按下键盘上的按键时会触发<code>keydown</code>事件</td></tr><tr><td align="left">window.onkeyup</td><td align="left">在当前元素上释放键盘按键时会触发<code>keyup事件</code></td></tr><tr><td align="left">btn.onmouseover</td><td align="left">当鼠标移动到一个元素上时,会在这个元素上触发mouseover事件</td></tr><tr><td align="left">btn.onmouseout</td><td align="left">当鼠标离开一个元素时,会在这个元素上触发mouseout事件</td></tr></tbody></table><h4 id="1-2-行内事件处理器-请勿使用"><a href="#1-2-行内事件处理器-请勿使用" class="headerlink" title="1.2 行内事件处理器 - 请勿使用"></a>1.2 行内事件处理器 - 请勿使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"alert('Hello World');"</span>&gt;Press me&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>我们应该避免使用这种方式。因为它会使标记数量变大，而可读性却较差。 内容/结构 和 行为之间没有很好的分离，使得在处理bug时非常困难。</p><h4 id="1-3-addEventListener-（DOM2级）"><a href="#1-3-addEventListener-（DOM2级）" class="headerlink" title="1.3 addEventListener()（DOM2级）"></a>1.3 addEventListener()（DOM2级）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'Hello world'</span>);&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h5 id="addEventListener-参数"><a href="#addEventListener-参数" class="headerlink" title="addEventListener()参数"></a>addEventListener()参数</h5><table><thead><tr><th>参数名</th><th>传入参数</th></tr></thead><tbody><tr><td><strong>type</strong></td><td>表示监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events" target="_blank" rel="noopener">事件类型</a>的字符串。</td></tr><tr><td><strong>listener</strong></td><td>实现了Event接口的对象或者函数</td></tr><tr><td><strong>options</strong> 可选</td><td>一个指定有关 <code>listener</code>属性的可选参数<strong>对象</strong></td></tr><tr><td><strong>useCapture</strong> 可选</td><td>Boolean，默认为false，在事件冒泡阶段调用事件处理程序，反之为捕获</td></tr></tbody></table><h5 id="addEventListener-返回值"><a href="#addEventListener-返回值" class="headerlink" title="addEventListener()返回值"></a>addEventListener()返回值</h5><p>undefined</p><p>在DOM2级可以给同一个监听器注册多个处理器，而DOM0级不能实现这一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myElement.onclick = functionA;</span><br><span class="line">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure><p>第二行会覆盖第一行，但是下面这种方式就会正常工作了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myElement.addEventListener(<span class="string">'click'</span>, functionA);</span><br><span class="line">myElement.addEventListener(<span class="string">'click'</span>, functionB);</span><br></pre></td></tr></table></figure><p>当元素被点击时两个函数都会工作</p><p><strong>注意</strong>：通过addEventListener()添加的事件处理程序只能用removeEventListener()来移除，并且移除时传入的参数必须与添加时传入的参数一样。</p><h4 id="1-4-IE事件处理器"><a href="#1-4-IE事件处理器" class="headerlink" title="1.4 IE事件处理器"></a>1.4 IE事件处理器</h4><p>IE用了attachEvent()，detachEvent()，接收两个参数，<strong>事件名称、事件处理程序</strong>，通过 attachEvent() 添加的事件处理程序都会被添加到冒泡阶段,所以平时为了兼容更多的浏览器最好将事件添加到事件冒泡阶段,IE8及以前只支持事件冒泡;</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"><span class="keyword">var</span> handlers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);  <span class="comment">//true,注意attachEvent()添加的事件处理程序运行在全局作用域中;</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">'onclick'</span>, handlers);</span><br></pre></td></tr></table></figure><h5 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建的方法是addHandlers(),removeHandlers(),这两个方法属于一个叫EventUtil的对象;但是这个没有考虑到IE中作用域的问题，不过就添加和移除事件还是足够的。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">   addHandlers: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handlers</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">         element.addEventListener(type, handlers, <span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">         element.attachEvent(on + type, handlers);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         element[<span class="string">'on'</span> + type] = handlers;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   removeHandlers: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handlers</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">         element.removeEventListener(type, handlers, <span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">         element.detachEvent(on + type, handlers);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line"><span class="keyword">var</span> handlers = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">EventUtil.addHandlers(btn, <span class="string">'click'</span>, handlers);</span><br><span class="line">EventUtil.removeHandlers(btn, <span class="string">'click'</span>, handlers);</span><br></pre></td></tr></table></figure><p>在同一个对象上注册事件，并不一定按照注册顺序执行，冒泡或捕获模式会影响其被触发的顺序</p><h3 id="2-事件冒泡及捕获"><a href="#2-事件冒泡及捕获" class="headerlink" title="2.事件冒泡及捕获"></a>2.事件冒泡及捕获</h3><p>当一个事件发生在具有父元素的元素上，现代浏览器运行两个不同的阶段——捕获阶段和冒泡阶段。</p><h4 id="2-1捕获阶段"><a href="#2-1捕获阶段" class="headerlink" title="2.1捕获阶段"></a>2.1捕获阶段</h4><ul><li>浏览器检查元素的最外层祖先<code>&lt;html&gt;</code>，是否在捕获阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它。</li><li>然后，它移动到<code>&lt;html&gt;</code>中单击元素的下一个祖先元素，并执行相同的操作，然后是单击元素再下一个祖先元素，依此类推，直到到达实际点击的元素。</li></ul><h4 id="2-2冒泡阶段"><a href="#2-2冒泡阶段" class="headerlink" title="2.2冒泡阶段"></a>2.2冒泡阶段</h4><ul><li>浏览器检查实际点击的元素是否在冒泡阶段中注册了一个<code>onclick</code>事件处理程序，如果是，则运行它</li><li>然后它移动到下一个直接的祖先元素，并做同样的事情，然后是下一个，等等，直到它到达<code>&lt;html&gt;</code>元素。</li></ul><h4 id="2-3用stopPropagation-修复问题"><a href="#2-3用stopPropagation-修复问题" class="headerlink" title="2.3用stopPropagation()修复问题"></a>2.3用stopPropagation()修复问题</h4><p>当在事件对象上调用该函数时，它只会让当前事件处理程序运行，但事件不会在<strong>冒泡</strong>链上进一步扩大，因此将不会有更多事件处理器被运行(不会向上冒泡)。</p><h3 id="3-事件对象-event"><a href="#3-事件对象-event" class="headerlink" title="3.事件对象 event"></a>3.事件对象 event</h3><p><code>event</code>，<code>evt</code>或简单的<code>e</code>。 这被称为<strong>事件对象</strong>，它被自动传递给事件处理函数，以提供额外的功能和信息，比如： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bgChange</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rndCol = <span class="string">'rgb('</span> + random(<span class="number">255</span>) + <span class="string">','</span> + random(<span class="number">255</span>) + <span class="string">','</span> + random(<span class="number">255</span>) + <span class="string">')'</span>;</span><br><span class="line">  e.target.style.backgroundColor = rndCol;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;  </span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, bgChange);</span><br></pre></td></tr></table></figure><p>事件对象 <code>e</code> 的<code>target</code>属性始终是事件刚刚发生的元素的引用。</p><h4 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h4><p>虽然DOM和IE中对象不同，但是两者event中的全部信息和方法都是类似的只是实现方式不同，可以用前面提到过的EventUtil对象来求同存异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    addHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">            element.attachEvent(on + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getEvent: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getTarget: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    preventDefault: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.returnValue = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    stopPropagation: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">            element.detachEvent(on + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">'on'</span> + type] = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-事件委托"><a href="#4-事件委托" class="headerlink" title="4.事件委托"></a>4.事件委托</h3><h4 id="4-1-问题初现"><a href="#4-1-问题初现" class="headerlink" title="4.1 问题初现"></a>4.1 问题初现</h4><p>给100个按钮绑定事件，传统的做法就是：通过DOM操作获取每一个按钮元素分别绑定事件处理函数。</p><p>但在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间。</p><p>而每一个函数都是一个对象，所以都会占用内存，内存占用的越多性能毋庸置疑的会变得越差。</p><h4 id="4-2-解决方案——事件委托"><a href="#4-2-解决方案——事件委托" class="headerlink" title="4.2 解决方案——事件委托"></a>4.2 解决方案——事件委托</h4><p>事件委托就是利用事件冒泡，即：利用冒泡机制将一类事件触发尽可能高的委托给其父节点或祖先节点来触发事件处理函数，这样只需要定义一个函数，访问一次DOM对象，减少了内存的占用以及访问DOM元素的时间，降低了性能的消耗。</p><p><strong>例子</strong>：<br>点击某一个 Li 标签时，将 Li 的背景色显示在 P 标签内，并将 P 标签中的文字颜色设置成 Li 的背景色，下面是html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"palette"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:crimson"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:bisque"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:blueviolet"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:coral"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:chartreuse"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:darkolivegreen"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:cyan"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background-color:#194738"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"color-picker"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实现方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">document</span>.querySelector(<span class="string">".palette"</span>);</span><br><span class="line">list.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">const</span> t = e.target || e.srcElement;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'color-picker'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</span><br><span class="line">        p.innerHTML = t.style.backgroundColor;</span><br><span class="line">        p.style.color = t.style.backgroundColor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适合事件委托的事件有：click，mousedown，mouseup，keydown，keyup，keypress。</p><p><strong>参考文章</strong><br><a href="https://www.cnblogs.com/lazychen/p/5664788.html" target="_blank" rel="noopener">https://www.cnblogs.com/lazychen/p/5664788.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;事件&lt;/strong&gt;是您在编程时系统内发生的动作或者发生的事情——系统会在事件出现的时候触发某种信号并且会提供一个自动加载某种动作，列举一些可能发生的事件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户在某个元素上点击鼠标或悬停光标。&lt;/li&gt;
&lt;li&gt;用户在键盘中按下
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>定位与层级</title>
    <link href="https://liang5757.github.io/2020/07/31/%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%B1%82%E7%BA%A7/"/>
    <id>https://liang5757.github.io/2020/07/31/%E5%AE%9A%E4%BD%8D%E4%B8%8E%E5%B1%82%E7%BA%A7/</id>
    <published>2020-07-31T09:12:37.000Z</published>
    <updated>2020-07-31T09:12:51.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定位-position"><a href="#1-定位-position" class="headerlink" title="1. 定位  position"></a>1. 定位  position</h3><h4 id="1-1-静态定位-static"><a href="#1-1-静态定位-static" class="headerlink" title="1.1 静态定位  static"></a>1.1 静态定位  static</h4><p>每个元素的默认值，将元素放入它在文档布局流中的正常位置。</p><h4 id="1-2-相对定位-relative"><a href="#1-2-相对定位-relative" class="headerlink" title="1.2 相对定位 relative"></a>1.2 相对定位 relative</h4><p>开启定位后，可以使用top、right、bottom，left四个属性设置偏移量。选择一个垂直方向和竖直方向上的偏移量即可为一个元素定位。</p><p><strong>要点</strong></p><ul><li>相对定位的元素<strong>不会</strong>脱离文档流</li><li>开启相对定位后，如果不设置偏移量，元素不会发生任何变化</li><li>相对定位是相对于元素在文档流中原来的位置进行定位</li><li>相对定位会使元素提升一个层级</li><li>相对定位不会改变元素的性质</li></ul><h4 id="1-3-绝对定位-absolute"><a href="#1-3-绝对定位-absolute" class="headerlink" title="1.3 绝对定位  absolute"></a>1.3 绝对定位  absolute</h4><p>定位方式同上</p><p><strong>要点</strong></p><ul><li><p>绝对定位的元素<strong>会</strong>脱离文档流</p></li><li><p>开启绝对定位后，如果不设置偏移量，元素不会发生任何变化</p></li><li><p>绝对定位是相对于离他最近的开启了定位的祖先元素进行定位的（一般情况，开启了子元素的绝对定位都会同时开启父元素的相对定位）<br>  - 如果所有的祖先元素都没有开启定位，则会相对于浏览器窗口进行定位</p></li><li><p>绝对定位会使元素提升一个层级</p></li><li><p>绝对定位会改变元素的性质</p><p>  - <strong>内联元素变块元素</strong><br>  - 块元素的宽度和高度默认都被内容撑开</p></li></ul><h4 id="1-4-固定定位-fixed"><a href="#1-4-固定定位-fixed" class="headerlink" title="1.4 固定定位  fixed"></a>1.4 固定定位  fixed</h4><p>​    定位方式同上</p><p><strong>要点</strong><br>固定定位也是一种绝对定位，大部分特点与绝对定位一致，<strong>不同</strong>的是</p><ul><li>固定定位永远都会相对于浏览器窗口进行定位</li><li>固定定位会固定在浏览器窗口某个位置，不会随滚动条滚动</li><li><strong>IE6不支持固定定位</strong></li></ul><h3 id="2-层级-z-index"><a href="#2-层级-z-index" class="headerlink" title="2.层级  z-index"></a>2.层级  z-index</h3><p><strong>要点</strong></p><ul><li>如果定位元素的层级是一样，则下边的元素会盖住上边的</li><li>层级越高，越优先显示</li><li><strong>对于没有开启定位的元素不能使用z-index</strong></li><li>定位的元素都具有z-index为auto，实际上为0</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-定位-position&quot;&gt;&lt;a href=&quot;#1-定位-position&quot; class=&quot;headerlink&quot; title=&quot;1. 定位  position&quot;&gt;&lt;/a&gt;1. 定位  position&lt;/h3&gt;&lt;h4 id=&quot;1-1-静态定位-static&quot;&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>浮动与BFC</title>
    <link href="https://liang5757.github.io/2020/07/31/%E6%B5%AE%E5%8A%A8%E4%B8%8EBFC/"/>
    <id>https://liang5757.github.io/2020/07/31/%E6%B5%AE%E5%8A%A8%E4%B8%8EBFC/</id>
    <published>2020-07-31T09:11:21.000Z</published>
    <updated>2020-07-31T09:11:45.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-浮动的工作原理"><a href="#1-浮动的工作原理" class="headerlink" title="1.  浮动的工作原理"></a>1.  浮动的工作原理</h3><p>浮动会<strong>脱离</strong>正常的文档流，并吸附到其父容器左边，正常布局中位于浮动元素下的内容会<strong>围绕</strong>着浮动元素</p><h3 id="2-可选值"><a href="#2-可选值" class="headerlink" title="2.可选值"></a>2.可选值</h3><table><thead><tr><th>值</th><th>效果</th></tr></thead><tbody><tr><td>none</td><td>默认值，元素默认在文档流中排列</td></tr><tr><td>left</td><td>元素会立即脱离文档流，向页面的左侧浮动</td></tr><tr><td>right</td><td>元素会立即脱离文档流，向页面的右侧浮动</td></tr></tbody></table><h3 id="3-浮动的规则"><a href="#3-浮动的规则" class="headerlink" title="3.浮动的规则"></a>3.浮动的规则</h3><p><strong>内联元素变块元素</strong><br>当为一个元素设置浮动以后（float属性是一个非none的值），元素会立即脱离文档流，元素脱离文档流以后，它下边的元素会立即向上移动，元素浮动以后，会尽量向页面的左上或这是右上漂浮，<strong>直到遇到父元素的边框或者其他的浮动元素</strong>如果浮动元素上边是一个没有浮动的块元素，则<strong>浮动元素不会超过块元素，浮动的元素不会超过他上边的兄弟元素</strong>，<strong>最多最多一边齐</strong>。</p><h3 id="4-浮动的包裹性"><a href="#4-浮动的包裹性" class="headerlink" title="4.浮动的包裹性"></a>4.浮动的包裹性</h3><p>指的是元素尺寸刚好容纳内容, 表现得就像<code>diaplay:inline-block</code></p><p>一样具有包裹性的其他属性:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span></span><br><span class="line">position:absolute/fixed/sticky</span><br><span class="line">overflow:hidden/scroll</span><br></pre></td></tr></table></figure><h3 id="5-浮动的破坏性"><a href="#5-浮动的破坏性" class="headerlink" title="5. 浮动的破坏性"></a>5. 浮动的破坏性</h3><p>会使父元素<strong>高度塌陷</strong>——为了实现文字环绕效果</p><p>具有破坏性的其他属性:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span></span><br><span class="line">position:absolute/fixed/sticky</span><br></pre></td></tr></table></figure><h3 id="6-清除浮动-clear"><a href="#6-清除浮动-clear" class="headerlink" title="6.清除浮动  clear"></a>6.清除浮动  clear</h3><p>清除掉其他元素浮动对当前元素产生的影响</p><p><strong>可选值</strong></p><table><thead><tr><th>值</th><th>效果</th></tr></thead><tbody><tr><td>none</td><td>默认值，不清除浮动</td></tr><tr><td>left</td><td>清除左侧浮动元素对当前元素的影响</td></tr><tr><td>right</td><td>清除右侧浮动元素对当前元素的影响</td></tr><tr><td>both</td><td>清除两侧浮动元素对当前元素的影响</td></tr></tbody></table><h3 id="7-解决高度塌陷"><a href="#7-解决高度塌陷" class="headerlink" title="7.解决高度塌陷"></a>7.解决高度塌陷</h3><h4 id="7-1-BFC"><a href="#7-1-BFC" class="headerlink" title="7.1 BFC"></a>7.1 BFC</h4><p>根据W3C的标准，在页面中元素都一个隐含的属性叫做<strong>块级格式化上下文(Block Formatting Context)</strong>，<strong>是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域</strong>，可以设置打开或者关闭，默认是为关闭的。</p><h5 id="BFC打开方式"><a href="#BFC打开方式" class="headerlink" title="BFC打开方式"></a>BFC打开方式</h5><ol><li>设置父元素元素浮动<br> - 使用这种方式开启，虽然可以撑开父元素，但是会导致父元素的宽度丢失。<br> - 而且使用这种方式也会导致下边的元素上移，不能解决问题。</li><li>设置元素绝对定位</li><li>设置元素为flex-box，grid 或 display: table-cell / table-caption / inline-block<br> - 可以解决问题，但是会导致宽度丢失，不推荐使用这种方式</li><li>将元素的overflow设置为一个非visible的值<br> - 此为副作用最小的方式</li></ol><p><strong>BFC特性</strong></p><ol><li>创建了BFC的元素中，<strong>子浮动元素也会参与高度计算</strong>，即父元素的垂直外边距不会和子元素重叠。</li><li>开启BFC的元素是一个独立的容器，子元素不会影响外面的元素，反之亦然——可以解决外边距合并的问题</li><li>开启BFC的元素</li><li>开启BFC的元素可以包含浮动的子元素</li></ol><p>由此得到解决高度塌陷的第一种方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><p><strong>IE6及以下的浏览器中并不支持BFC，所以使用这种方式不能兼容IE6。</strong></p><p><strong>在IE6中虽然没有BFC，但是具有另一个隐含的属性叫做hasLayout，该属性的作用和BFC类似，所在IE6浏览器可以通过开hasLayout来解决该问题</strong><br><strong>开启方式很多，我们直接使用一种副作用最小的：zoom: 1;</strong></p><p>最后得到以下形式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="comment">/* zoom表示放大的意思，只在IE中支持 */</span></span><br><span class="line"><span class="selector-tag">zoom</span>: 1;</span><br></pre></td></tr></table></figure><h4 id="7-2-用空白元素设置clear-both"><a href="#7-2-用空白元素设置clear-both" class="headerlink" title="7.2 用空白元素设置clear:both"></a>7.2 用空白元素设置clear:both</h4><p>可以直接在高度塌陷的<strong>父元素的最后</strong>，<strong>添加一个空白的div</strong>，由于这个div并没有浮动，所以他是可以撑开父元素的高度的，然后在对其进行清除浮动，这样可以通过这个空白的div来撑开父元素的高度，基本没有副作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然可以解决问题，但会在文档中添加多余的结构，不符合结构与表现分离的思想。</p><h4 id="7-3-隐式元素"><a href="#7-3-隐式元素" class="headerlink" title="7.3 隐式元素"></a>7.3 隐式元素</h4><p>由7.2的方法可以想到用css实现的方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="comment">/* 添加一个内容 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/* 转换为一个块元素 */</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="comment">/* 清除两侧的浮动 */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容IE6 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h6><p><a href="http://ife.baidu.com/note/detail/id/959" target="_blank" rel="noopener">http://ife.baidu.com/note/detail/id/959</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-浮动的工作原理&quot;&gt;&lt;a href=&quot;#1-浮动的工作原理&quot; class=&quot;headerlink&quot; title=&quot;1.  浮动的工作原理&quot;&gt;&lt;/a&gt;1.  浮动的工作原理&lt;/h3&gt;&lt;p&gt;浮动会&lt;strong&gt;脱离&lt;/strong&gt;正常的文档流，并吸附到其父容器左
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Java的字符串操作</title>
    <link href="https://liang5757.github.io/2020/07/31/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>https://liang5757.github.io/2020/07/31/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-31T09:04:16.000Z</published>
    <updated>2020-07-31T09:07:13.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、比较"><a href="#一、比较" class="headerlink" title="一、比较"></a>一、比较</h2><table><thead><tr><th>语言</th><th>操作</th><th>形式</th><th>机制</th><th>线程安全性</th></tr></thead><tbody><tr><td>c/c++</td><td>char*</td><td>字符指针</td><td>通过手动修改指针指向的内存空间修改字符串</td><td>未知</td></tr><tr><td>c/c++</td><td>String</td><td>容器类</td><td>内部使用char数组存储字符，但内存管理，分配和null终止都由字符串类本身来处理</td><td>并发的读操作是线程安全的</td></tr><tr><td>Java</td><td>String</td><td>1. String a = “a”，是以字面常量的形式储存在常量池中<br />2. new String(“a”) 创建的以对象的形式存放在堆中</td><td><strong>对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象</strong></td><td>安全</td></tr><tr><td>Java</td><td>StringBuilder</td><td>对象</td><td><strong>所有操作都在原有的对象上进行</strong></td><td>不安全</td></tr><tr><td>Java</td><td>StringBuffer</td><td>对象</td><td><strong>所有操作都在原有的对象上进行</strong></td><td>安全</td></tr></tbody></table><h2 id="二、性能测试"><a href="#二、性能测试" class="headerlink" title="二、性能测试"></a>二、性能测试</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM = <span class="number">100000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(NUM + <span class="string">":"</span>);</span><br><span class="line">        testString();</span><br><span class="line">        testStringBuffer();</span><br><span class="line">        testStringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">            str += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"String:"</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        StringBuffer str = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">            str.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuffer:"</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">            str.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder:"</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100000:</span><br><span class="line">String: 2907ms</span><br><span class="line">StringBuffer: 9ms</span><br><span class="line">StringBuilder: 5ms</span><br></pre></td></tr></table></figure><p>在该测试中String在字符串拼接上明显低于其他两者，也说明了String每次拼接字符串都要新建对象的时间消耗很大，而StringBuffer加了synchronized是线程安全的，在效率上不如StringBuilder，符合了预期。</p><h2 id="三、java正则表达式"><a href="#三、java正则表达式" class="headerlink" title="三、java正则表达式"></a>三、java正则表达式</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 邮政编码</span></span><br><span class="line">    String postal_code = <span class="string">"[1-9]\\d&#123;5&#125;"</span>;</span><br><span class="line">    <span class="comment">// 区号-座机号码</span></span><br><span class="line">    String landline = <span class="string">"\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;"</span>;</span><br><span class="line">    <span class="comment">// 手机号码</span></span><br><span class="line">    String phone = <span class="string">"1[345678]\\d&#123;9&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试字符串</span></span><br><span class="line">    String text = <span class="string">"513215 13411156663 010-88888888"</span>;</span><br><span class="line"></span><br><span class="line">    Pattern r = Pattern.compile(postal_code);</span><br><span class="line">    Matcher m = r.matcher(text);</span><br><span class="line">    System.out.println(<span class="string">"邮政编码："</span>);</span><br><span class="line">    <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">        System.out.println(m.group());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = Pattern.compile(landline);</span><br><span class="line">    m = r.matcher(text);</span><br><span class="line">    System.out.println(<span class="string">"区号-座机号码："</span>);</span><br><span class="line">    <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">        System.out.println(m.group());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = Pattern.compile(phone);</span><br><span class="line">    m = r.matcher(text);</span><br><span class="line">    System.out.println(<span class="string">"手机号码："</span>);</span><br><span class="line">    <span class="keyword">if</span> (m.find()) &#123;</span><br><span class="line">        System.out.println(m.group());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">邮政编码：</span><br><span class="line">513215</span><br><span class="line">区号-座机号码：</span><br><span class="line">010-88888888</span><br><span class="line">手机号码：</span><br><span class="line">13411156663</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/dolphin0520/p/3778589.html" target="_blank" rel="noopener">探秘Java中的String、StringBuilder以及StringBuffer</a><br><a href="https://www.geeksforgeeks.org/c-string-class-and-its-applications/" target="_blank" rel="noopener">C++ string class and its applications</a><br><a href="https://www.runoob.com/java/java-regular-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-regular-expressions.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、比较&quot;&gt;&lt;a href=&quot;#一、比较&quot; class=&quot;headerlink&quot; title=&quot;一、比较&quot;&gt;&lt;/a&gt;一、比较&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语言&lt;/th&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;th&gt;机制&lt;/
      
    
    </summary>
    
    
      <category term="大学课程" scheme="https://liang5757.github.io/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://liang5757.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>四则运算生成命令行程序 (Python)</title>
    <link href="https://liang5757.github.io/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/"/>
    <id>https://liang5757.github.io/2020/07/29/%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F-Python/</id>
    <published>2020-07-29T07:29:07.000Z</published>
    <updated>2020-07-31T09:03:00.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github项目地址：Github-Pages"><a href="#Github项目地址：Github-Pages" class="headerlink" title="Github项目地址：Github Pages"></a>Github项目地址：<a href="https://github.com/P4XL/Collaborators" target="_blank" rel="noopener">Github Pages</a></h3><p><strong>结对项目成员</strong>：张鹏 3118004985 郑靓 3118004988</p><hr><h2 id="一、项目需求分析"><a href="#一、项目需求分析" class="headerlink" title="一、项目需求分析"></a>一、项目需求分析</h2><p><img src= "/img/loading.gif" data-src="upload_1a34d9eb8e15a77a9e4c2d5ebc21686e.png" alt=""></p><h2 id="二、功能实现"><a href="#二、功能实现" class="headerlink" title="二、功能实现"></a>二、功能实现</h2><p><img src= "/img/loading.gif" data-src="upload_bbd168d7d9aeb25e7d9270afd96b830f.png" alt=""></p><hr><h2 id="三、代码实现or功能说明"><a href="#三、代码实现or功能说明" class="headerlink" title="三、代码实现or功能说明"></a>三、代码实现or功能说明</h2><h3 id="★-GUI功能扩展说明-🎈"><a href="#★-GUI功能扩展说明-🎈" class="headerlink" title="★ GUI功能扩展说明 🎈"></a>★ GUI功能扩展说明 🎈</h3><p><img src= "/img/loading.gif" data-src="upload_0bb403332af8e8c649391ee56389bfc4.png" alt=""></p><ul><li><p>采用了<strong>多线程</strong>的界面，任何操作不会阻塞其他操作，<strong>例如：可以在生成答案的同时批改作业</strong></p></li><li><p>得益于上面的设计，可以<strong>同时生成多个表达式文件</strong>，存储形式如下所示</p><p>  <img src= "/img/loading.gif" data-src="image-20200414233819634.png" alt="image-20200414233819634"></p></li><li><p>对于<strong>错误的输入</strong>，会有提示，如下所示</p><p>  <img src= "/img/loading.gif" data-src="image-20200414234132290.png" alt="image-20200414234132290"></p></li><li><p>对于文件选择后，点击批改，对于<strong>文件的格式有错误检查</strong></p><p>  <img src= "/img/loading.gif" data-src="image-20200414234112231.png" alt="image-20200414234112231"></p></li></ul><h3 id="通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成-详参下文-‘判断重复的思路’"><a href="#通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成-详参下文-‘判断重复的思路’" class="headerlink" title="通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成 (详参下文 ‘判断重复的思路’ )"></a>通过后缀表达式的计算过程，确保生成表达式满足题目所有要求，避免重复的表达式生成 (详参下文 ‘判断重复的思路’ )</h3><h3 id="★-多线程（防止I-O阻塞）🎈"><a href="#★-多线程（防止I-O阻塞）🎈" class="headerlink" title="★ 多线程（防止I/O阻塞）🎈"></a>★ 多线程（防止I/O阻塞）🎈</h3><ul><li>创建<strong>生产者</strong>线程, 传参进队列 ‘queue’</li></ul><blockquote><p>producer = multiprocessing.Process(target=self.expression_generator, args=(queue,))</p></blockquote><ul><li>创建<strong>消费者</strong>进程, 传参进队列 ‘queue’</li></ul><blockquote><p>consumer = multiprocessing.Process(target=self.io_operation, args=(queue,))</p></blockquote><ul><li><p><strong>生产者</strong>——循环生成表达式 及其答案</p><ol><li><strong>构建</strong>随机表达式 以及生成其答案 ‘ Arithmetic(self.domain).create_arithmetic() ‘</li><li><strong>生成</strong>其表达式对应答案 ‘ Calculate(expression).cal_expression() ‘</li><li>将生成后缀表达式过程中每次的结果 以及操作符集合 保存到 字典 (‘ self.no_repeat_dict ‘ ) 中, 从而确保生成等式不相同 (即 3+2+1 与 1+2+3 不相等, ６×8  与 8×6 相等)</li><li>生成完成后, 把表达式 以及 答案添加到队列 <strong>queue</strong> 中</li></ol></li><li><p><strong>消费者</strong>——循环生成表达式 及其答案</p><ol><li>通过死循环不断获取队列内容, 若队列传出 ‘None’ 信号, 消费者进程停止</li><li>解析从队列获取的内容, 并将多次获取的表达式以及答案保存到 <strong>缓冲区(Buffer)</strong> 中, 有限次数后开始写入文件 并 销毁缓冲区内容</li></ol></li></ul><h3 id="★-判断重复的思路-🎈"><a href="#★-判断重复的思路-🎈" class="headerlink" title="★ 判断重复的思路 🎈"></a>★ 判断重复的思路 🎈</h3><ol><li>由于考虑到题目说<strong>1+2+3</strong>，<strong>2+1+3</strong>相等，<strong>1+2+3</strong>和<strong>3+2+1</strong>是不相等的，我一开始是从<strong>字符串的处理</strong>考虑，但是复杂度有点高。</li><li>所以换了一个角度考虑，从<strong>运算顺序</strong>入手，就想到用<strong>后缀表达式</strong>进行去重，并且这样也<strong>不用考虑括号</strong>，符合题目所说的<strong>（1+2)+3</strong>和<strong>1+2+3</strong>相等</li><li>具体就是<strong>存储每一次运算出来的结果</strong>，然后进行<strong>一一比较</strong><br> <strong>例如</strong>（这里举的是比较简单的例子）： 1+2+3，压入的数字：[3, 6]; 3+2+1，压入的数字：[5，6]，所有两个判断为不相等</li><li>但是这样会出现<strong>1+3</strong>和<strong>2+2</strong>判断为<strong>重复</strong>的情况，所以<strong>添加</strong>两个数组——<strong>[操作数]，[运算符]</strong>，作为比较的依据</li><li>再来考虑效率，用<strong>字典</strong>的数据结构，以答案为键，其他三个比较标志作为值，只在<strong>答案相等的情况下判重</strong><br> 附：最终选定了添加后缀计算的去重模式，就是为了避免 <strong>(1÷1)+3</strong> 和 <strong>1+(3÷1)</strong> 这种不为重复表达式的情况，但是效率确实比只判断（操作数、运算符）的模式低了</li></ol><h4 id="——创建数据结构"><a href="#——创建数据结构" class="headerlink" title="——创建数据结构"></a>——创建数据结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用答案作为索引构建的字典，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"1'2/2"</span>: [</span><br><span class="line">        [[压入的数字], [操作数], [运算符]],</span><br><span class="line">        [[压入的数字], [操作数], [运算符]],</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过比较上述字典, 确认新表达式是否已经在上述字典中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_repeat</span><span class="params">(self, answer, test_sign)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> expression_sign <span class="keyword">in</span> self.no_repeat_dict[answer]:</span><br><span class="line">        <span class="comment"># 记录相同的个数</span></span><br><span class="line">        same_num = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> collections.Counter(expression_sign[i]) == collections.Counter(test_sign[i]):</span><br><span class="line">                same_num += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 如果中间结果、操作数、运算符均相等，则为重复</span></span><br><span class="line">        <span class="keyword">if</span> same_num == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="★-生成表达式思路-🎈"><a href="#★-生成表达式思路-🎈" class="headerlink" title="★ 生成表达式思路 🎈"></a>★ 生成表达式思路 🎈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表达式列表形式</span></span><br><span class="line">[<span class="string">'10'</span>, <span class="string">'÷'</span>, <span class="string">'('</span>, <span class="string">'8/9'</span>, <span class="string">'÷'</span>, <span class="string">'51'</span>, <span class="string">')'</span>]</span><br></pre></td></tr></table></figure><ol><li>随机生成<strong>操作数</strong>列表，<strong>运算符</strong>列表</li><li>根据以上两个列表构建<strong>无括号表达式</strong></li><li>根据运算符个数，随机生成括号个数，<strong>最大</strong>个数为（ 1-&gt;0, 2-&gt;1, 3-&gt;2 ）</li><li>再随机括号位置，维护<strong>操作数位置列表</strong>，插入括号</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成表达式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_arithmetic</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 生成随机操作数、运算符列表</span></span><br><span class="line">    self.create_operand_list()</span><br><span class="line">    self.create_operator_list()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建表达式列表</span></span><br><span class="line">    self.expression_split.append(self.operand_list[i])</span><br><span class="line">    self.expression_split.append(self.operator_list[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(self.operator_list):</span><br><span class="line">        self.expression_split.append(self.operand_list[i])</span><br><span class="line">        self.expression_split.append(self.operator_list[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        self.expression_split.append(self.operand_list[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入括号</span></span><br><span class="line">        <span class="keyword">if</span> self.operator_num != <span class="number">1</span>:</span><br><span class="line">            bracket_num = random.randint(<span class="number">1</span>, self.operator_num - <span class="number">1</span>)</span><br><span class="line">            self.insert_bracket(bracket_num)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除无用括号</span></span><br><span class="line">            self.del_useless_bracket()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> [self.expression_split, self.operand_list, self.operator_list]</span><br></pre></td></tr></table></figure><h3 id="★-计算思路（后缀表达式）-🎈"><a href="#★-计算思路（后缀表达式）-🎈" class="headerlink" title="★ 计算思路（后缀表达式） 🎈"></a>★ 计算思路（后缀表达式） 🎈</h3><h4 id="生成后缀表达式"><a href="#生成后缀表达式" class="headerlink" title="生成后缀表达式"></a>生成后缀表达式</h4><ol><li>设置两个栈，一个用以存储运算符，一个用以存储后缀表达式</li><li>循环遍历表达式列表，如果是<strong>操作数</strong>，则加入<strong>后缀栈</strong></li><li>否则如果是运算符则进入以下判断<ul><li>如果运算符栈为<strong>空</strong>，或者栈顶为 <strong>(</strong> ，则压入<strong>运算符栈</strong></li><li>否则如果当前运算符<strong>大于</strong>栈顶运算符的优先级，则压入<strong>运算符栈</strong></li><li>否则<strong>弹栈并压入后缀栈</strong>直到优先级<strong>大于</strong>栈顶<strong>或空栈</strong></li></ul></li><li>否则如果遇到括号则进入以下判断<ul><li>若为 <strong>(</strong> 直接压入<strong>运算符栈</strong></li><li>否则<strong>弹栈并压入后缀栈</strong>直到遇到 <strong>(</strong></li></ul></li><li>将运算符栈<strong>剩余的元素</strong>压入<strong>后缀栈</strong></li></ol><h4 id="计算后缀表达式"><a href="#计算后缀表达式" class="headerlink" title="计算后缀表达式"></a>计算后缀表达式</h4><ol><li>用一个栈（calculate_stack）作为计算中介</li><li>循环遍历后缀表达式，若为<strong>数字</strong>压入 <strong>calculate_stack</strong></li><li>否则从 <strong>calculate_stack</strong> 弹出两个数字，分别化为分数类，进行计算，结果压入 <strong>calculate_stack</strong></li><li>重复 <strong>2-3</strong>，若<strong>期间</strong>运算结果<strong>出现负数</strong>，或<strong>除数为0</strong>，则返回false</li><li>直至后缀表达式遍历完成，返回 <strong>calculate_stack</strong> 的栈顶</li></ol><h3 id="代码-🎈"><a href="#代码-🎈" class="headerlink" title="代码 🎈"></a>代码 🎈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculate</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, expression)</span>:</span></span><br><span class="line">        self.expression = expression</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数加法 a1/b1 + a2/b2 = (a1b2 + a2b1)/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_add</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator + fra2.molecular * fra1.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数减法 a1/b1 - a2/b2 = (a1b2 - a2b1)/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_minus</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator - fra2.molecular * fra1.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数乘法 a1/b1 * a2/b2 = a1a2/b1b2</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_multiply</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.molecular</span><br><span class="line">        denominator = fra1.denominator * fra2.denominator</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分数除法 a1/b1 ÷ a2/b2 = a1b2/a2b1</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fraction_divide</span><span class="params">(fra1, fra2)</span>:</span></span><br><span class="line">        molecular = fra1.molecular * fra2.denominator</span><br><span class="line">        denominator = fra1.denominator * fra2.molecular</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Fraction(molecular, denominator)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基本运算选择器</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">operate</span><span class="params">(self, num1, num2, operater)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num1, Fraction):</span><br><span class="line">            num1 = Fraction(num1)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num2, Fraction):</span><br><span class="line">            num2 = Fraction(num2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算结果</span></span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'+'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_add(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_minus(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'×'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_multiply(num1, num2)</span><br><span class="line">        <span class="keyword">if</span> operater == <span class="string">'÷'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fraction_divide(num1, num2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转成逆波兰</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_postfix_expression</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 运算符栈</span></span><br><span class="line">        operator_stack = []</span><br><span class="line">        <span class="comment"># 后缀栈</span></span><br><span class="line">        postfix_stack = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> self.expression:</span><br><span class="line">            <span class="comment"># 如果是操作数则添加</span></span><br><span class="line">            <span class="keyword">if</span> element <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">                postfix_stack.append(element)</span><br><span class="line">            <span class="comment"># 如果是运算符则按优先级</span></span><br><span class="line">            <span class="keyword">elif</span> element <span class="keyword">in</span> operator.values():</span><br><span class="line">                <span class="comment"># 运算符栈为空，或者栈顶为(，则压栈</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> operator_stack <span class="keyword">or</span> operator_stack[<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 若当前运算符优先级大于运算符栈顶，则压栈</span></span><br><span class="line">                <span class="keyword">elif</span> priority[element] &gt;= priority[operator_stack[<span class="number">-1</span>]]:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 否则弹栈并压入后缀队列直到优先级大于栈顶或空栈</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">while</span> operator_stack <span class="keyword">and</span> priority[element] &lt; priority[operator_stack[<span class="number">-1</span>]]:</span><br><span class="line">                        postfix_stack.append(operator_stack.pop())</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果遇到括号</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 若为左括号直接压入运算符栈</span></span><br><span class="line">                <span class="keyword">if</span> element == <span class="string">'('</span>:</span><br><span class="line">                    operator_stack.append(element)</span><br><span class="line">                <span class="comment"># 否则弹栈并压入后缀队列直到遇到左括号</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">while</span> operator_stack[<span class="number">-1</span>] != <span class="string">'('</span>:</span><br><span class="line">                        postfix_stack.append(operator_stack.pop())</span><br><span class="line">                    operator_stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> operator_stack:</span><br><span class="line">            postfix_stack.append(operator_stack.pop())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> postfix_stack</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算表达式(运算过程出现负数，或者除数为0，返回False，否则返回Fraction类)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_expression</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 生成后缀表达式</span></span><br><span class="line">        expressions_result = self.generate_postfix_expression()</span><br><span class="line">        <span class="comment"># 存储阶段性结果</span></span><br><span class="line">        stage_results = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用list作为栈来计算</span></span><br><span class="line">        calculate_stack = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 后缀遍历</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> expressions_result:</span><br><span class="line">            <span class="comment"># 若是数字则入栈, 操作符则将栈顶两个元素出栈</span></span><br><span class="line">            <span class="keyword">if</span> element <span class="keyword">not</span> <span class="keyword">in</span> operators:</span><br><span class="line">                calculate_stack.append(element)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 操作数</span></span><br><span class="line">                num1 = calculate_stack.pop()</span><br><span class="line">                <span class="comment"># 操作数</span></span><br><span class="line">                num2 = calculate_stack.pop()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 除数不能为0</span></span><br><span class="line">                <span class="keyword">if</span> num1 == <span class="string">"0"</span> <span class="keyword">and</span> element == <span class="string">'÷'</span>:</span><br><span class="line">                    <span class="keyword">return</span> [<span class="literal">False</span>, []]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 结果</span></span><br><span class="line">                result = self.operate(num2, num1, element)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> result.denominator == <span class="number">0</span> <span class="keyword">or</span> <span class="string">'-'</span> <span class="keyword">in</span> result.to_string():</span><br><span class="line">                    <span class="keyword">return</span> [<span class="literal">False</span>, []]</span><br><span class="line"></span><br><span class="line">                stage_results.append(result.to_string())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 结果入栈</span></span><br><span class="line">                calculate_stack.append(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> [calculate_stack[<span class="number">0</span>], stage_results]</span><br></pre></td></tr></table></figure><h2 id="四、实际测试"><a href="#四、实际测试" class="headerlink" title="四、实际测试"></a>四、实际测试</h2><blockquote><h3 id="通过命令行控制"><a href="#通过命令行控制" class="headerlink" title="通过命令行控制"></a>通过命令行控制</h3><p>python ArithmeticCLMode.py [args|args]<br>[args]<br>├─ -h –help # 输出帮助信息<br>├─ -n # 指定生成表达式数量，默认100<br>├─ -r # 指定生成表达式各个数字的取值范围，默认100<br>├─ -a # 需和-e参数共同使用进行批改，指定答案文件<br>├─ -e # 需和-a参数共同使用进行批改，指定练习文件<br>└─ -g # 开启GUI</p></blockquote><blockquote><h3 id="通过gui控制"><a href="#通过gui控制" class="headerlink" title="通过gui控制"></a>通过gui控制</h3></blockquote><blockquote><p>python ArithmeticGMode.py</p></blockquote><p><img src= "/img/loading.gif" data-src="image-20200414233202708.png" alt="image-20200414233202708"></p><h4 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ArithmeticCLMode.py -n <span class="number">100</span> -r <span class="number">100</span></span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="upload_60c4aa60be8f2619d5715fc68bfa762d.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将上述执行生成的 Exercise.txt 中的1~10题的答案改为错误 执行</span></span><br><span class="line">python ArithmeticCLMode.py -e ./docs/Exercise.txt -a ./docs/Answer.txt</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="upload_993b6c9a87996b978128c0eacd68a660.png" alt=""></p><hr><h2 id="五、效能分析"><a href="#五、效能分析" class="headerlink" title="五、效能分析"></a>五、效能分析</h2><blockquote><p>由Pycharm测试输出性能测试</p></blockquote><p><img src= "/img/loading.gif" data-src="upload_cc740cca241023e3a9f800dca4c03b00.png" alt=""></p><blockquote><p>程序耗时在多线程中的 生成表达式及计算, 以及I/O操作</p></blockquote><blockquote><p>在值域1000的情况下各生成不同数量级四则运算的耗时测试<br><img src= "/img/loading.gif" data-src="upload_97d3624288947d04deacbe79ec23f00d.png" alt=""></p></blockquote><hr><h2 id="六、PSP表格-🚩"><a href="#六、PSP表格-🚩" class="headerlink" title="六、PSP表格 🚩"></a>六、PSP表格 🚩</h2><table><thead><tr><th>PSP2.1</th><th>Personal Software Process Stages</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>Planning</td><td>计划</td><td>30</td><td>10</td></tr><tr><td>· Estimate</td><td>· 估计这个任务需要多少时间</td><td>30</td><td>10</td></tr><tr><td>Development</td><td>开发</td><td>1055</td><td>1480</td></tr><tr><td>· Analysis</td><td>· 需求分析 (包括学习新技术)</td><td>120</td><td>335</td></tr><tr><td>· Design Spec</td><td>· 生成设计文档</td><td>60</td><td>35</td></tr><tr><td>· Design Review</td><td>· 设计复审 (和同事审核设计文档)</td><td>5</td><td>5</td></tr><tr><td>· Coding Standard</td><td>· 代码规范 (为目前的开发制定合适的规范)</td><td>10</td><td>5</td></tr><tr><td>· Design</td><td>· 具体设计</td><td>200</td><td>120</td></tr><tr><td>· Coding</td><td>· 具体编码</td><td>600</td><td>580</td></tr><tr><td>· Code Review</td><td>· 代码复审</td><td>30</td><td>120</td></tr><tr><td>· Test</td><td>· 测试（自我测试，修改代码，提交修改）</td><td>30</td><td>150</td></tr><tr><td>Reporting</td><td>报告</td><td>85</td><td>130</td></tr><tr><td>· Test Report</td><td>· 测试报告</td><td>60</td><td>30</td></tr><tr><td>· Size Measurement</td><td>· 计算工作量</td><td>10</td><td>10</td></tr><tr><td>· Postmortem &amp; Process Improvement Plan</td><td>· 事后总结, 并提出过程改进计划</td><td>15</td><td>90</td></tr><tr><td>合计</td><td></td><td>1170</td><td>1620</td></tr></tbody></table><hr><h2 id="七、总结-🚀"><a href="#七、总结-🚀" class="headerlink" title="七、总结 🚀"></a>七、总结 🚀</h2><blockquote><p>优点：</p></blockquote><ol><li>在此次项目合作中，我们通过 “Notion” 这一个软件完成设计我们的 开发流程、工作分配以及我们的代码规范的设计。我们将需求列出，根据难度不同从而安排开发流程，每个人根据自己能力特出点不同而去做不同的需求，再通过交流约定我们每个人的接口。简化开发流程。</li><li>交流和配合都挺顺畅的</li></ol><blockquote><p>不足：</p></blockquote><ol><li>开发中各个模块的依赖关系在开发任务中没有处理清楚，导致双方都有空窗期</li></ol><h3 id="互评-❤💛💙"><a href="#互评-❤💛💙" class="headerlink" title="互评 ❤💛💙"></a>互评 ❤💛💙</h3><blockquote><p>To 郑靓<br>能力强，效率高，非常积极主动。能根据自己日常使用的工具提高效率，在实际开发中有明确的开发流程思路，开发过程中有部分函数代码注释思路不清。</p></blockquote><blockquote><p>To 张鹏<br>配合和交流能力强，效率高，能主动揽接任务，思维挺好的，但比较被动</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Github项目地址：Github-Pages&quot;&gt;&lt;a href=&quot;#Github项目地址：Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github项目地址：Github Pages&quot;&gt;&lt;/a&gt;Github项目地址：&lt;a hre
      
    
    </summary>
    
    
      <category term="大学课程" scheme="https://liang5757.github.io/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="软件工程" scheme="https://liang5757.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>WordCount (Python)</title>
    <link href="https://liang5757.github.io/2020/07/28/WordCount-Python/"/>
    <id>https://liang5757.github.io/2020/07/28/WordCount-Python/</id>
    <published>2020-07-28T13:44:44.000Z</published>
    <updated>2020-07-31T09:03:20.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordCount-Python"><a href="#WordCount-Python" class="headerlink" title="WordCount (Python)"></a>WordCount (Python)</h1><h3 id="Github项目地址：https-github-com-w1036933220-WordCount"><a href="#Github项目地址：https-github-com-w1036933220-WordCount" class="headerlink" title="Github项目地址：https://github.com/w1036933220/WordCount"></a>Github项目地址：<a href="https://github.com/w1036933220/WordCount" target="_blank" rel="noopener">https://github.com/w1036933220/WordCount</a></h3><h2 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h2><ol><li>把项目需求理清楚，画一个思维导图</li></ol><p><img src= "/img/loading.gif" data-src="image-20200318234358738.png" alt="image-20200318234358738"></p><ol start="2"><li>考虑各部分功能所需要的大概实现思路</li></ol><p><img src= "/img/loading.gif" data-src="image-20200318234452134.png" alt="image-20200318234452134"></p><ol start="3"><li>然后完成了计算文件属性的算法部分</li><li>再回头想对指令的解析问题，顺带添加了递归处理多个文件的功能</li><li>查python的os库文档，最后决定用os.walk读取当前文件夹内的所有文件夹和文件，替换掉输入的*和?通配符，再进行匹配</li></ol><h2 id="三、设计实现过程及代码说明"><a href="#三、设计实现过程及代码说明" class="headerlink" title="三、设计实现过程及代码说明"></a>三、设计实现过程及代码说明</h2><ol><li>main.py（入口文件）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    command = input(<span class="string">"请输入命令(wc.exe [parameter] &#123;file_name&#125;):\n"</span>)</span><br><span class="line"></span><br><span class="line">parse_command(command)</span><br></pre></td></tr></table></figure><ol start="2"><li>orders.py<br> 存放指令集，和输出各类数据的函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.count <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> views.main_view <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出字符数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_char_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"字符数："</span> + str(FileProperties(text).count_char_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出单词数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_word_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"词数："</span> + str(FileProperties(text).count_word_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出行数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_line_num</span><span class="params">(text)</span>:</span></span><br><span class="line">print(<span class="string">"行数："</span> + str(FileProperties(text).count_line_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出代码行/空行/注释行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_code_property</span><span class="params">(text)</span>:</span></span><br><span class="line">    file_properties = FileProperties(text)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"空行："</span> + str(file_properties.count_null_line_num()))</span><br><span class="line">    print(<span class="string">"注释行："</span> + str(file_properties.count_annotation_line_num()))</span><br><span class="line">    print(<span class="string">"代码行："</span> + str(file_properties.count_code_line_num()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调出图形界面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_view</span><span class="params">()</span>:</span></span><br><span class="line">root = MainView(tk.Tk())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_error</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单指令命令集</span></span><br><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: print_char_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">'-w'</span>: print_word_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-l"</span>: print_line_num,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-a"</span>: print_code_property,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-s"</span>: print_error,</span><br><span class="line"></span><br><span class="line">    <span class="string">"-x"</span>: draw_view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>utils.py<br> 放置解析指令、读取文件、模糊搜素的函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> utils.orders <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># description：parse command</span></span><br><span class="line"><span class="comment"># param：order input</span></span><br><span class="line"><span class="comment"># return：[order, [file_list]] / FALSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_command</span><span class="params">(command)</span>:</span></span><br><span class="line">    command = command.strip().split(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指令若为空或者起始不为wc.exe则报错</span></span><br><span class="line">    <span class="keyword">if</span> command == [] <span class="keyword">or</span> command[<span class="number">0</span>] != <span class="string">"wc.exe"</span>:</span><br><span class="line">        print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开图形界面的指令(一级指令)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"-x"</span> <span class="keyword">in</span> command:</span><br><span class="line">        orders.get(<span class="string">"-x"</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(command) &gt; <span class="number">2</span>:</span><br><span class="line">        order = command[<span class="number">-2</span>]</span><br><span class="line">        file_name = command[<span class="number">-1</span>]</span><br><span class="line">        file_list = get_file_list(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归调用的指令</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"-s"</span> <span class="keyword">in</span> command:</span><br><span class="line">            <span class="keyword">if</span> file_list:</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">                    print(file + <span class="string">":"</span>)</span><br><span class="line">                    text = read_file(file)</span><br><span class="line">                    orders.get(order)(text)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(file_list[<span class="number">0</span>] + <span class="string">":"</span>)</span><br><span class="line">            text = read_file(file_name)</span><br><span class="line">            orders.get(order)(text)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"指令输入错误"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取目录下符合条件的文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_list</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="comment"># 最终构建的文件列表</span></span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="comment"># 匹配到的文件夹列表、需二次处理</span></span><br><span class="line">    dir_list = []</span><br><span class="line"></span><br><span class="line">    file_name = file_name.replace(<span class="string">"?"</span>, <span class="string">"\\S"</span>).replace(<span class="string">"*"</span>, <span class="string">"\\S+"</span>)</span><br><span class="line">    file_name += <span class="string">"$"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>, topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> re.match(file_name, name):</span><br><span class="line">                file_list.append(os.path.join(root, name))</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">            <span class="keyword">if</span> re.match(file_name, name):</span><br><span class="line">                dir_list.append(os.path.join(os.getcwd() + os.sep, name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果文件夹非空，则继续收集</span></span><br><span class="line">    <span class="keyword">if</span> dir_list:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> dir_list:</span><br><span class="line">            all_file = os.listdir(item)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> all_file:</span><br><span class="line">                <span class="comment"># 文件的完整路径</span></span><br><span class="line">                file_path = item + os.sep + file</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">                    file_list.append(file_path)</span><br><span class="line"></span><br><span class="line">    print(file_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># description：read files</span></span><br><span class="line"><span class="comment"># param：file_list</span></span><br><span class="line"><span class="comment"># return：file content</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.readlines()</span><br></pre></td></tr></table></figure><ol start="4"><li>count.py<br> 存放计算文件属性的类</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileProperties</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_text)</span>:</span></span><br><span class="line">        self.file_text = file_text</span><br><span class="line">        <span class="comment"># 字符数</span></span><br><span class="line">        self.char_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 单词数</span></span><br><span class="line">        self.word_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 行数</span></span><br><span class="line">        self.line_num = len(file_text)</span><br><span class="line">        <span class="comment"># 空行</span></span><br><span class="line">        self.null_line_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 代码行</span></span><br><span class="line">        self.code_line_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 注释行数</span></span><br><span class="line">        self.annotation_line_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算字符数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_char_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            self.char_num += len(line.strip())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.char_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算单词数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_word_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            <span class="comment"># 正则匹配一行中的所有单词，并计算单词数</span></span><br><span class="line">            self.word_num += len(re.findall(<span class="string">r'[a-zA-Z0-9]+[\-\']?[a-zA-Z]*'</span>, line))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.word_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算行数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算空行数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_null_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            <span class="comment"># 只有不超过一个可显示的字符</span></span><br><span class="line">            <span class="keyword">if</span> len(re.findall(<span class="string">r'\S'</span>, line)) &lt;= <span class="number">1</span>:</span><br><span class="line">                self.null_line_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.null_line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算代码行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_code_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.line_num - self.null_line_num - self.annotation_line_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算注释行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count_annotation_line_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.file_text:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="comment"># 匹配不是代码行且有//</span></span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r'^\S?\s*?\/\/'</span>, line):</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 匹配不是代码行且有/*</span></span><br><span class="line">            <span class="keyword">elif</span> re.match(<span class="string">r'^\S?\s*?\/\*'</span>, line):</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> line.endswith(<span class="string">'*/'</span>):</span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> flag == <span class="number">1</span>:</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"*/"</span> <span class="keyword">in</span> line:</span><br><span class="line">                self.annotation_line_num += <span class="number">1</span></span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.annotation_line_num</span><br></pre></td></tr></table></figure><p>5.main_view.py(新增)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</span><br><span class="line"><span class="keyword">import</span> tkinter.filedialog</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.count <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainView</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, window)</span>:</span></span><br><span class="line">        self.window = window</span><br><span class="line">        self.window.title(<span class="string">"这是船新的版本！"</span>)</span><br><span class="line">        self.window.geometry(<span class="string">"540x290"</span>)</span><br><span class="line">        self.data_tree = ttk.Treeview(self.window, show=<span class="string">"headings"</span>)</span><br><span class="line">        self.creat_view()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">creat_view</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 选择文件按钮</span></span><br><span class="line">        btn = tk.Button(self.window, text=<span class="string">"选择文件"</span>, command=self.file_choose).place(x=<span class="number">240</span>, y=<span class="number">247</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件数据显示表格</span></span><br><span class="line">        self.data_tree.place(x=<span class="number">8</span>, y=<span class="number">8</span>)</span><br><span class="line">        <span class="comment"># 定义列</span></span><br><span class="line">        self.data_tree[<span class="string">"columns"</span>] = (<span class="string">"文件名"</span>, <span class="string">"字符数"</span>, <span class="string">"单词数"</span>, <span class="string">"行数"</span>, <span class="string">"空行数"</span>, <span class="string">"代码行数"</span>, <span class="string">"注释行数"</span>)</span><br><span class="line">        <span class="comment"># 设置列属性，列不显示</span></span><br><span class="line">        self.data_tree.column(<span class="string">"文件名"</span>, width=<span class="number">100</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"字符数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"单词数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"空行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"代码行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        self.data_tree.column(<span class="string">"注释行数"</span>, width=<span class="number">70</span>)</span><br><span class="line">        <span class="comment"># 设置表头</span></span><br><span class="line">        self.data_tree.heading(<span class="string">"文件名"</span>, text=<span class="string">"文件名"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"字符数"</span>, text=<span class="string">"字符数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"单词数"</span>, text=<span class="string">"单词数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"行数"</span>, text=<span class="string">"行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"空行数"</span>, text=<span class="string">"空行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"代码行数"</span>, text=<span class="string">"代码行数"</span>)</span><br><span class="line">        self.data_tree.heading(<span class="string">"注释行数"</span>, text=<span class="string">"注释行数"</span>)</span><br><span class="line"></span><br><span class="line">        self.window.mainloop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_choose</span><span class="params">(self)</span>:</span></span><br><span class="line">        file_list = tk.filedialog.askopenfilenames()</span><br><span class="line">        <span class="keyword">for</span> index, file <span class="keyword">in</span> enumerate(file_list):</span><br><span class="line">            text = read_file(file)</span><br><span class="line">            [char_num, word_num, line_num, null_line_num, code_line_num,</span><br><span class="line">             annotation_line_num] = FileProperties(text).all_count()</span><br><span class="line">            file = file.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">            self.data_tree.insert(<span class="string">''</span>, index, values=(file, char_num, word_num, line_num,</span><br><span class="line">                                                 null_line_num, code_line_num, annotation_line_num))</span><br></pre></td></tr></table></figure><h2 id="五、PSP表格"><a href="#五、PSP表格" class="headerlink" title="五、PSP表格"></a>五、PSP表格</h2><table><thead><tr><th>PSP2.1</th><th>Personal Software Process Stages</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>Planning</td><td>计划</td><td>10</td><td>8</td></tr><tr><td>· Estimate</td><td>· 估计这个任务需要多少时间</td><td>10</td><td>8</td></tr><tr><td>Development</td><td>开发</td><td>460</td><td>610</td></tr><tr><td>· Analysis</td><td>· 需求分析 (包括学习新技术)</td><td>120</td><td>200</td></tr><tr><td>· Design Spec</td><td>· 生成设计文档</td><td>90</td><td>60</td></tr><tr><td>· Design Review</td><td>· 设计复审 (和同事审核设计文档)</td><td>5</td><td>5</td></tr><tr><td>· Coding Standard</td><td>· 代码规范 (为目前的开发制定合适的规范)</td><td>5</td><td>0</td></tr><tr><td>· Design</td><td>· 具体设计</td><td>120</td><td>100</td></tr><tr><td>· Coding</td><td>· 具体编码</td><td>90</td><td>200</td></tr><tr><td>· Code Review</td><td>· 代码复审</td><td>10</td><td>30</td></tr><tr><td>· Test</td><td>· 测试（自我测试，修改代码，提交修改）</td><td>20</td><td>15</td></tr><tr><td>Reporting</td><td>报告</td><td>30</td><td>32</td></tr><tr><td>· Test Report</td><td>· 测试报告</td><td>10</td><td>12</td></tr><tr><td>· Size Measurement</td><td>· 计算工作量</td><td>10</td><td>5</td></tr><tr><td>· Postmortem &amp; Process Improvement Plan</td><td>· 事后总结, 并提出过程改进计划</td><td>10</td><td>8</td></tr><tr><td>合计</td><td></td><td>355</td><td>630</td></tr></tbody></table><h2 id="六、测试运行"><a href="#六、测试运行" class="headerlink" title="六、测试运行"></a>六、测试运行</h2><p><img src= "/img/loading.gif" data-src="image-20200324233229734.png" alt="image-20200324233229734"></p><p><img src= "/img/loading.gif" data-src="image-20200324233138984.png" alt="image-20200324233138984"></p><p>图形界面测试（新增）</p><p><img src= "/img/loading.gif" data-src="image-20200325013347708.png" alt="image-20200325013347708"></p><p><img src= "/img/loading.gif" data-src="image-20200325020159689.png" alt="image-20200325020159689"></p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ol><li>太久没写python了，发现居然没有switch这个语句，百度查到了表驱动这个东西</li><li>用时与预计的出入有点大</li><li>输入验证处理没有做完全，图形界面没时间做了（过了大半年遗忘率确实高）</li><li>写的时候发现python有些问题不知道是bug还是什么</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: print_char_num,</span><br><span class="line">    <span class="string">'-w'</span>: print_word_num,</span><br><span class="line">    <span class="string">"-l"</span>: print_line_num,</span><br><span class="line">    <span class="string">"-a"</span>: print_code_property,</span><br><span class="line">    <span class="string">"-s"</span>: print_error,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我的指令集，如果把他写成像js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">orders = &#123;</span><br><span class="line">    <span class="string">'-c'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 某些操作</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python不管会不会用到这个指令集，都会把字典中的值执行一遍，所以只能放函数名，js就不会</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WordCount-Python&quot;&gt;&lt;a href=&quot;#WordCount-Python&quot; class=&quot;headerlink&quot; title=&quot;WordCount (Python)&quot;&gt;&lt;/a&gt;WordCount (Python)&lt;/h1&gt;&lt;h3 id=&quot;Githu
      
    
    </summary>
    
    
      <category term="大学课程" scheme="https://liang5757.github.io/categories/%E5%A4%A7%E5%AD%A6%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="软件工程" scheme="https://liang5757.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>仿网易云音乐的对话气泡框</title>
    <link href="https://liang5757.github.io/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%B0%94%E6%B3%A1%E6%A1%86/"/>
    <id>https://liang5757.github.io/2020/07/17/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%B0%94%E6%B3%A1%E6%A1%86/</id>
    <published>2020-07-16T17:16:34.000Z</published>
    <updated>2020-07-29T07:13:54.623Z</updated>
    
    <content type="html"><![CDATA[<p>主要就是对话框小三角的实现，效果如下</p><p><img src= "/img/loading.gif" data-src="1.png" alt="1"></p><p>主要难点就是三角形的实现，有两种思路，一种是利用<strong>border</strong>，网易云音乐是用<strong>两个 ◆ 层叠显示边框</strong>的，下面是核心代码</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"darr"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bd"</span>&gt;</span>◆<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span>◆<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>liang<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    ：<span class="tag">&lt;<span class="name">span</span>&gt;</span>嘤嘤嘤呀呀呀呀呀呀晕晕晕晕<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.darr</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 边框</span><br><span class="line"><span class="selector-class">.bd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要就是对话框小三角的实现，效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要难点就是三角形的实现，有两种思路，一种是利用&lt;strong&gt;border&lt;/strong&gt;，网
      
    
    </summary>
    
    
      <category term="前端" scheme="https://liang5757.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://liang5757.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
